name: Enhanced Test Matrix

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - e2e
          - visual
          - performance
      environment:
        description: 'Environment to test'
        required: false
        default: 'production'
        type: choice
        options:
          - localhost
          - preview
          - production
      browser_matrix:
        description: 'Run across multiple browsers'
        required: false
        default: true
        type: boolean

jobs:
  matrix-setup:
    name: Setup Test Matrix
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.set-matrix.outputs.matrix }}
      
    steps:
      - name: Set test matrix
        id: set-matrix
        run: |
          if [ "${{ github.event.inputs.test_type }}" == "e2e" ] || [ "${{ github.event.inputs.test_type }}" == "all" ]; then
            echo "matrix={\"include\":[
              {\"test-type\":\"unit\",\"node-version\":\"18\",\"docs-env\":\"localhost\"},
              {\"test-type\":\"unit\",\"node-version\":\"20\",\"docs-env\":\"production\"},
              {\"test-type\":\"e2e\",\"browser\":\"chromium\",\"docs-env\":\"localhost\"},
              {\"test-type\":\"e2e\",\"browser\":\"firefox\",\"docs-env\":\"preview\"},
              {\"test-type\":\"e2e\",\"browser\":\"webkit\",\"docs-env\":\"production\"},
              {\"test-type\":\"visual\",\"browser\":\"chromium\",\"docs-env\":\"production\"},
              {\"test-type\":\"performance\",\"browser\":\"chromium\",\"docs-env\":\"production\"}
            ]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"include\":[
              {\"test-type\":\"unit\",\"node-version\":\"20\",\"docs-env\":\"production\"}
            ]}" >> $GITHUB_OUTPUT
          fi

  enhanced-test-matrix:
    name: ${{ matrix.test-type }} tests (Node ${{ matrix.node-version || 'default' }}, ${{ matrix.browser || 'N/A' }}, ${{ matrix.docs-env }})
    runs-on: ubuntu-latest
    needs: matrix-setup
    strategy:
      matrix: ${{ fromJson(needs.matrix-setup.outputs.test-matrix) }}
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version || '20' }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build theme package
        run: pnpm --filter @ifla/theme build

      # Unit testing with enhanced configuration
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          export DOCS_ENV=${{ matrix.docs-env }}
          pnpm test --coverage --reporter=json --reporter=junit
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      # E2E testing with browser matrix
      - name: Install Playwright browsers
        if: matrix.test-type == 'e2e' || matrix.test-type == 'visual' || matrix.test-type == 'performance'
        run: npx playwright install ${{ matrix.browser }}

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: |
          export DOCS_ENV=${{ matrix.docs-env }}
          export SHARD=1
          export SHARD_CURRENT=1
          export SHARD_TOTAL=2
          npx playwright test --project=${{ matrix.browser }} --reporter=json --reporter=junit
        env:
          BASE_URL: ${{ matrix.docs-env == 'localhost' && 'http://localhost:3000' || matrix.docs-env == 'preview' && 'https://ifla-standards-preview.netlify.app' || 'https://standards.ifla.org' }}

      # Visual regression testing
      - name: Run visual regression tests
        if: matrix.test-type == 'visual'
        run: |
          export DOCS_ENV=${{ matrix.docs-env }}
          npx playwright test e2e/visual-regression-enhanced.spec.ts --project=${{ matrix.browser }} --reporter=json
        env:
          BASE_URL: ${{ matrix.docs-env == 'localhost' && 'http://localhost:3000' || matrix.docs-env == 'preview' && 'https://ifla-standards-preview.netlify.app' || 'https://standards.ifla.org' }}

      # Performance testing
      - name: Run performance tests
        if: matrix.test-type == 'performance'
        run: |
          export DOCS_ENV=${{ matrix.docs-env }}
          npx playwright test e2e/performance.spec.ts --project=${{ matrix.browser }} --reporter=json
        env:
          BASE_URL: ${{ matrix.docs-env == 'localhost' && 'http://localhost:3000' || matrix.docs-env == 'preview' && 'https://ifla-standards-preview.netlify.app' || 'https://standards.ifla.org' }}

      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}-${{ matrix.node-version || 'default' }}-${{ matrix.browser || 'nodejs' }}-${{ matrix.docs-env }}
          path: |
            test-results/
            playwright-report/
            coverage/
          retention-days: 7

      # Upload visual regression artifacts
      - name: Upload visual diff artifacts
        if: failure() && matrix.test-type == 'visual'
        uses: actions/upload-artifact@v4
        with:
          name: visual-diff-${{ matrix.browser }}-${{ matrix.docs-env }}
          path: |
            test-results/
            playwright-report/
          retention-days: 14

  # Parallel E2E testing with sharding
  e2e-sharded:
    name: E2E Tests (Sharded)
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'e2e' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
        browser: [chromium, firefox]
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build theme package
        run: pnpm --filter @ifla/theme build

      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }}

      - name: Run E2E tests (Shard ${{ matrix.shard }}/4)
        run: |
          export SHARD_CURRENT=${{ matrix.shard }}
          export SHARD_TOTAL=4
          export DOCS_ENV=production
          npx playwright test --project=${{ matrix.browser }} --reporter=json --reporter=junit
        env:
          BASE_URL: https://standards.ifla.org

      - name: Upload shard results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-shard-${{ matrix.shard }}-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/

  # Test result aggregation and reporting
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [enhanced-test-matrix, e2e-sharded]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results-combined

      - name: Generate test summary
        run: |
          echo "# 🧪 Enhanced Test Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count test results
          UNIT_SUCCESS=0
          E2E_SUCCESS=0
          VISUAL_SUCCESS=0
          TOTAL_TESTS=0
          
          for result_dir in test-results-combined/*/; do
            if [ -d "$result_dir" ]; then
              TOTAL_TESTS=$((TOTAL_TESTS + 1))
              if [[ "$result_dir" == *"unit"* ]]; then
                UNIT_SUCCESS=$((UNIT_SUCCESS + 1))
              elif [[ "$result_dir" == *"e2e"* ]]; then
                E2E_SUCCESS=$((E2E_SUCCESS + 1))
              elif [[ "$result_dir" == *"visual"* ]]; then
                VISUAL_SUCCESS=$((VISUAL_SUCCESS + 1))
              fi
            fi
          done
          
          echo "| Test Type | Status | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.enhanced-test-matrix.result == 'success' && '✅ Passed' || '❌ Failed' }} | $UNIT_SUCCESS |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-sharded.result == 'success' && '✅ Passed' || '❌ Failed' }} | $E2E_SUCCESS |" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Tests | ${{ needs.enhanced-test-matrix.result == 'success' && '✅ Passed' || '❌ Failed' }} | $VISUAL_SUCCESS |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **${{ needs.enhanced-test-matrix.result == 'success' && needs.e2e-sharded.result == 'success' && '✅ All Passed' || '❌ Some Failed' }}** | **$TOTAL_TESTS** |" >> $GITHUB_STEP_SUMMARY

      - name: Set overall status
        if: |
          needs.enhanced-test-matrix.result != 'success' ||
          needs.e2e-sharded.result != 'success'
        run: exit 1