name: Simple GitHub Pages Deploy (Fallback)
# Minimal fallback deployment without optimizations
# Use nx-optimized-docs-deploy.yml for normal deployments

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for using fallback deployment'
        required: true
        type: string

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    name: Build and Deploy to GitHub Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Configure Nx for CI environment
        run: |
          echo "🔧 Configuring Nx for CI environment..."
          pnpm nx:optimize:environment
          echo "✅ Nx configured with CI-optimized settings"
        
      - name: Build theme package
        run: pnpm nx build @ifla/theme
        
      - name: Build all documentation sites and collect warnings
        id: build-warnings
        env:
          DOCS_ENV: preview
        run: |
          echo "🏗️ Building documentation sites and collecting warnings..."
          node scripts/collect-warnings-parallel.js
          
          # Extract warning data for API access
          if [ -f "output/_reports/build-warnings.json" ]; then
            WARNING_COUNT=$(jq '[.[] | .warnings | length] | add' output/_reports/build-warnings.json)
            SITE_SUMMARY=$(jq -c '[.[] | {site: .site, warnings: .warnings | length, success: .success, buildTime: .buildTime}]' output/_reports/build-warnings.json)
            echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
            echo "site_summary=$SITE_SUMMARY" >> $GITHUB_OUTPUT
            echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          else
            echo "warning_count=0" >> $GITHUB_OUTPUT
            echo "site_summary=[]" >> $GITHUB_OUTPUT
          fi
          
          # Check if builds completed (warnings are OK, but builds must succeed)
          if [ ! -d "portal/build" ] || [ ! -d "standards/isbd/build" ]; then
            echo "❌ Some builds failed. Check the warnings report."
            exit 1
          fi
          
      - name: Skip admin app for now
        run: |
          echo "⏭️ Skipping admin app build (has API routes that don't work with static export)"
          echo "Focus: Get basic Docusaurus sites working first"
          
      - name: Create unified build
        run: |
          echo "📦 Creating unified build directory..."
          node scripts/create-unified-build.js --env preview
          
           # Content is already at correct paths in _site root
           echo "📁 Site structure is correct - no platform subdirectory needed"
          
          # Add GitHub Pages configuration
          echo "iflastandards.github.io" > _site/CNAME
          touch _site/.nojekyll
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload build warnings report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-warnings-report
          path: |
            output/_reports/build-warnings.json
            output/_reports/build-warnings-summary.md
            output/_reports/build-summary.json
          retention-days: 30
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Post deployment warning summary
        if: always()
        run: |
          # Create structured summary for API access
          if [ -f "output/_reports/build-warnings.json" ]; then
            # Create a summary JSON with metadata
            jq -n \
              --arg run_id "${{ github.run_id }}" \
              --arg run_number "${{ github.run_number }}" \
              --arg sha "${{ github.sha }}" \
              --arg ref "${{ github.ref }}" \
              --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --arg warning_count "${{ steps.build-warnings.outputs.warning_count }}" \
              --argjson site_summary '${{ steps.build-warnings.outputs.site_summary }}' \
              --argjson detailed_warnings "$(cat output/_reports/build-warnings.json)" \
              '{
                run_id: $run_id,
                run_number: $run_number,
                sha: $sha,
                ref: $ref,
                timestamp: $timestamp,
                warning_count: ($warning_count | tonumber),
                site_summary: $site_summary,
                detailed_warnings: $detailed_warnings
              }' > output/_reports/build-summary.json
              
            # Also create the markdown summary
            echo "## 📊 Build Warnings Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Warnings**: ${{ steps.build-warnings.outputs.warning_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Timestamp**: ${{ steps.build-warnings.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ -f "output/_reports/build-warnings-summary.md" ]; then
              cat output/_reports/build-warnings-summary.md >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📥 [Download Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          fi