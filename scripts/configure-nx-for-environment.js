#!/usr/bin/env node

/**
 * Dynamically configure Nx settings based on environment
 * - CI: Conservative settings (2-4 parallel, 2GB memory)
 * - Local: High-performance settings (8-12 parallel, 8GB memory)
 */

const fs = require('fs');
const path = require('path');
const { detectEnvironment, detectSystemSpecs, calculateOptimalSettings } = require('./detect-environment');

function updateNxConfig(settings) {
  const nxConfigPath = path.join(__dirname, '../nx.json');
  
  if (!fs.existsSync(nxConfigPath)) {
    console.error('‚ùå nx.json not found');
    process.exit(1);
  }

  const nxConfig = JSON.parse(fs.readFileSync(nxConfigPath, 'utf8'));
  
  // Update parallel settings
  nxConfig.parallel = settings.parallel;
  if (nxConfig.defaultTasksRunnerOptions) {
    nxConfig.defaultTasksRunnerOptions.parallel = settings.parallel;
  }

  // Write back to file
  fs.writeFileSync(nxConfigPath, JSON.stringify(nxConfig, null, 2) + '\n');
  
  console.log(`‚úÖ Updated nx.json with parallel=${settings.parallel}`);
}

function updateDaemonConfig(settings) {
  const daemonConfigPath = path.join(__dirname, '../.nxdaemonrc');
  
  let daemonConfig = {};
  if (fs.existsSync(daemonConfigPath)) {
    daemonConfig = JSON.parse(fs.readFileSync(daemonConfigPath, 'utf8'));
  }

  // Update daemon settings
  daemonConfig.maxMemory = `${settings.nxDaemonMemoryGB}GB`;
  daemonConfig.parallel = settings.parallel;
  
  if (!daemonConfig.performance) {
    daemonConfig.performance = {};
  }
  daemonConfig.performance.maxWorkers = settings.parallel;

  fs.writeFileSync(daemonConfigPath, JSON.stringify(daemonConfig, null, 2) + '\n');
  
  console.log(`‚úÖ Updated .nxdaemonrc with maxMemory=${settings.nxDaemonMemoryGB}GB, parallel=${settings.parallel}`);
}

function createEnvironmentFile(env, specs, settings) {
  const envContent = `# Environment-optimized settings
# Generated by configure-nx-for-environment.js
# Environment: ${env.isCI ? 'CI' : 'Local'} | Cores: ${specs.cores} | RAM: ${specs.memoryGB}GB

# Node.js optimization
NODE_OPTIONS="--max-old-space-size=${settings.nodeMemoryMB} --max-semi-space-size=512"

# Nx optimization
NX_PARALLEL=${settings.parallel}
NX_DAEMON_MEMORY=${settings.nxDaemonMemoryGB}GB
NX_CACHE_DIRECTORY=.nx/cache

# Performance tuning
UV_THREADPOOL_SIZE=${Math.min(specs.cores, 16)}

# Environment detection
DETECTED_ENVIRONMENT=${env.isCI ? 'ci' : 'local'}
DETECTED_CORES=${specs.cores}
DETECTED_MEMORY_GB=${specs.memoryGB}
`;

  const envFile = env.isCI ? '.env.ci' : '.env.local-optimized';
  fs.writeFileSync(envFile, envContent);
  
  console.log(`‚úÖ Created ${envFile} with environment-specific settings`);
}

function main() {
  console.log('üîß Configuring Nx for current environment...\n');

  const env = detectEnvironment();
  const specs = detectSystemSpecs();
  const settings = calculateOptimalSettings(specs, env);

  console.log(`üåç Environment: ${env.isCI ? 'CI' : 'Local'} ${env.isGitHubActions ? '(GitHub Actions)' : ''}`);
  console.log(`üíª System: ${specs.cores} cores, ${specs.memoryGB}GB RAM`);
  console.log(`‚öôÔ∏è  Settings: ${settings.parallel} parallel, ${settings.nodeMemoryMB}MB node, ${settings.nxDaemonMemoryGB}GB daemon\n`);

  // Update configurations
  updateNxConfig(settings);
  updateDaemonConfig(settings);
  createEnvironmentFile(env, specs, settings);

  console.log(`\nüéØ Nx configured for ${env.isCI ? 'CI environment' : 'local development'}!`);
  
  if (env.isCI) {
    console.log('üí° CI optimizations:');
    console.log(`   - Conservative parallel processing (${settings.parallel} workers)`);
    console.log(`   - Memory-efficient settings (${settings.nodeMemoryMB}MB per process)`);
    console.log('   - Reduced resource usage to prevent CI timeouts');
  } else {
    console.log('üí° Local optimizations:');
    console.log(`   - High-performance parallel processing (${settings.parallel} workers)`);
    console.log(`   - Generous memory allocation (${settings.nodeMemoryMB}MB per process)`);
    console.log('   - Optimized for development speed');
  }
}

if (require.main === module) {
  main();
}

module.exports = { updateNxConfig, updateDaemonConfig, createEnvironmentFile };