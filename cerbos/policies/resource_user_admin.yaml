# User Administration Resource Policy
# Defines permissions for managing user roles and assignments
---
apiVersion: api.cerbos.dev/v1
resourcePolicy:
  version: "default"
  resource: "user_admin"
  importDerivedRoles:
    - ifla_standards_roles
  rules:
    # System administrators can manage all users
    - actions: ["*"]
      effect: EFFECT_ALLOW
      roles: ["system-admin", "ifla-admin"]
      
    # Namespace administrators can manage users within their namespace
    - actions: ["view_users", "assign_namespace_roles", "assign_site_roles", "remove_roles"]
      effect: EFFECT_ALLOW
      derivedRoles: ["namespace_admin"]
      condition:
        match:
          expr: R.attr.scope == "namespace" && P.attr.namespaces.exists(n, n == R.attr.namespace && P.attr.namespaces[n] in ["admin"])
          
    # Site administrators can manage users for their specific site
    - actions: ["view_users", "assign_site_roles", "remove_site_roles"]
      effect: EFFECT_ALLOW
      derivedRoles: ["site_admin"]
      condition:
        match:
          expr: R.attr.scope == "site" && P.attr.sites.exists(s, s == R.attr.siteKey && P.attr.sites[s] == "admin")
          
    # Users can view their own role assignments
    - actions: ["view_own_roles"]
      effect: EFFECT_ALLOW
      roles: ["user"]
      condition:
        match:
          expr: P.id == R.attr.userId
          
    # Prevent privilege escalation - cannot assign higher roles than you have
    - actions: ["assign_namespace_roles", "assign_site_roles"]
      effect: EFFECT_DENY
      roles: ["*"]
      condition:
        match:
          expr: |
            R.attr.targetRole in ["system-admin", "ifla-admin"] && 
            !("system-admin" in P.roles || "ifla-admin" in P.roles)
            
  schemas:
    principalSchema:
      ref: cerbos:///principal.json
    resourceSchema:
      ref: cerbos:///user_admin.json