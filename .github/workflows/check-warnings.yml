name: Check Build Warnings

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  check-warnings:
    name: Check Docusaurus Build Warnings
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build theme package
        run: pnpm nx build @ifla/theme
        
      - name: Collect build warnings
        id: warnings
        run: |
          node scripts/collect-warnings-parallel.js
          
          # Extract warning data for API access
          if [ -f "output/_reports/build-warnings.json" ]; then
            WARNING_COUNT=$(jq '[.[] | .warnings | length] | add' output/_reports/build-warnings.json)
            SITE_SUMMARY=$(jq -c '[.[] | {site: .site, warnings: .warnings | length, success: .success, buildTime: .buildTime}]' output/_reports/build-warnings.json)
            echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
            echo "site_summary=$SITE_SUMMARY" >> $GITHUB_OUTPUT
            echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
            
            # Create API-friendly summary
            jq -n \
              --arg run_id "${{ github.run_id }}" \
              --arg run_number "${{ github.run_number }}" \
              --arg event_name "${{ github.event_name }}" \
              --arg pr_number "${{ github.event.pull_request.number || '' }}" \
              --arg sha "${{ github.sha }}" \
              --arg ref "${{ github.ref }}" \
              --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --arg warning_count "$WARNING_COUNT" \
              --argjson site_summary "$SITE_SUMMARY" \
              --argjson detailed_warnings "$(cat output/_reports/build-warnings.json)" \
              '{
                run_id: $run_id,
                run_number: $run_number,
                event_name: $event_name,
                pr_number: (if $pr_number == "" then null else ($pr_number | tonumber) end),
                sha: $sha,
                ref: $ref,
                timestamp: $timestamp,
                warning_count: ($warning_count | tonumber),
                site_summary: $site_summary,
                detailed_warnings: $detailed_warnings
              }' > output/_reports/check-summary.json
          else
            echo "warning_count=0" >> $GITHUB_OUTPUT
            echo "site_summary=[]" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload warnings report
        uses: actions/upload-artifact@v4
        with:
          name: docusaurus-build-warnings
          path: |
            output/_reports/build-warnings.json
            output/_reports/build-warnings-summary.md
            output/_reports/check-summary.json
          retention-days: 30
          
      - name: Comment PR with summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const warningCount = ${{ steps.warnings.outputs.warning_count }};
            
            let comment = '## 📊 Docusaurus Build Report\n\n';
            
            if (warningCount === 0) {
              comment += '✅ **All builds completed successfully with no warnings!**\n';
            } else {
              comment += `⚠️ **Found ${warningCount} warning${warningCount === 1 ? '' : 's'} across all documentation sites.**\n\n`;
              
              // Read summary if available
              try {
                const summaryPath = 'output/_reports/build-warnings-summary.md';
                if (fs.existsSync(summaryPath)) {
                  const summary = fs.readFileSync(summaryPath, 'utf8');
                  // Extract just the site summary
                  const lines = summary.split('\n');
                  const siteSection = lines.findIndex(line => line.includes('## By Site'));
                  if (siteSection !== -1) {
                    comment += '### Summary by Site\n';
                    let i = siteSection + 2;
                    while (i < lines.length && lines[i].startsWith('- ')) {
                      comment += lines[i] + '\n';
                      i++;
                    }
                  }
                }
              } catch (e) {
                console.error('Could not read summary:', e);
              }
              
              comment += '\n### 📄 Build Artifacts\n';
              comment += `- [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
              comment += `- [Download warnings report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts) (Look for "docusaurus-build-warnings")\n`;
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 📊 Docusaurus Build Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment,
              });
            }
            
      - name: Create issue for daily check
        if: github.event_name == 'schedule' && steps.warnings.outputs.warning_count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const warningCount = ${{ steps.warnings.outputs.warning_count }};
            const date = new Date().toISOString().split('T')[0];
            const fs = require('fs');
            
            let issueBody = `The daily build check found **${warningCount}** warnings in the documentation sites.\n\n`;
            
            // Add site summary if available
            try {
              const summaryPath = 'output/_reports/build-warnings-summary.md';
              if (fs.existsSync(summaryPath)) {
                const summary = fs.readFileSync(summaryPath, 'utf8');
                const lines = summary.split('\n');
                const siteSection = lines.findIndex(line => line.includes('## By Site'));
                if (siteSection !== -1) {
                  issueBody += '### Summary by Site\n';
                  let i = siteSection + 2;
                  while (i < lines.length && lines[i].startsWith('- ')) {
                    issueBody += lines[i] + '\n';
                    i++;
                  }
                  issueBody += '\n';
                }
                
                // Add detailed warnings section
                const warningsSection = lines.findIndex(line => line.includes('## All Warnings'));
                if (warningsSection !== -1) {
                  issueBody += '<details>\n<summary>Click to view detailed warnings</summary>\n\n';
                  for (let i = warningsSection + 2; i < lines.length; i++) {
                    issueBody += lines[i] + '\n';
                  }
                  issueBody += '\n</details>\n\n';
                }
              }
            } catch (e) {
              console.error('Could not read summary:', e);
            }
            
            issueBody += `### 📄 Build Artifacts\n\n`;
            issueBody += `- [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            issueBody += `- [Download warnings report artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts) (Look for "docusaurus-build-warnings")\n\n`;
            issueBody += `The artifact contains:\n`;
            issueBody += `- \`build-warnings.json\` - Full JSON data\n`;
            issueBody += `- \`build-warnings-summary.md\` - Markdown summary\n`;
            issueBody += `- \`check-summary.json\` - CI check metadata\n\n`;
            issueBody += `---\n_This issue was automatically created by the daily warning check._`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Docusaurus Build Warnings - ${date}`,
              body: issueBody,
              labels: ['documentation', 'build-warnings', 'automated'],
            });