#!/usr/bin/env node
import path from 'path';
import {
  checkFilesExist,
  generateMissingFilesReport,
} from './utils/file-existence-checker';
import {
  expandAutogeneratedReferences,
  extractSidebarReferencesFromFile,
} from './utils/sidebar-reference-extractor';

/**
 * Validates that all sidebar references have corresponding files for a specific site
 * @param siteName The name of the site (e.g., 'isbd', 'lrm')
 */
export async function validateSite(siteName: string): Promise<boolean> {
  const siteDir = path.resolve('standards', siteName);
  const sidebarPath = path.join(siteDir, 'sidebars.ts');

  console.log(`Validating sidebar references for ${siteName}...`);

  try {
    // Extract references from sidebar
    const references = await extractSidebarReferencesFromFile(sidebarPath);
    console.log(`Found ${references.length} references in sidebar`);

    // Expand autogenerated references
    const expandedReferences = await expandAutogeneratedReferences(
      siteDir,
      references,
    );
    console.log(`Expanded to ${expandedReferences.length} total references`);

    // Check if files exist
    const missingFiles = await checkFilesExist(siteDir, expandedReferences);

    // Generate report
    const report = generateMissingFilesReport(missingFiles);
    console.log('\n' + report);

    return missingFiles.length === 0;
  } catch (error) {
    console.error(
      `Error validating sidebar references for ${siteName}:`,
      error,
    );
    return false;
  }
}

/**
 * Main function
 */
async function main(): Promise<void> {
  // Get site names from command line arguments
  const args = process.argv.slice(2);

  if (args.length < 1) {
    console.error(
      'Usage: nx-validate-sidebar-references <site-name> [<site-name> ...]',
    );
    process.exit(1);
  }

  const siteNames = args;
  let success = true;

  for (const siteName of siteNames) {
    const siteSuccess = await validateSite(siteName);
    success = success && siteSuccess;
  }

  if (!success) {
    console.error('Validation failed for one or more sites');
    process.exit(1);
  }

  console.log('All sites validated successfully');
}

// Run the script if called directly
if (require.main === module) {
  main().catch((error) => {
    console.error('Unhandled error:', error);
    process.exit(1);
  });
}
