import fs from 'fs/promises';
import path from 'path';
import { beforeEach, describe, expect, it, vi } from 'vitest';
import {
  checkFilesExist,
  generateMissingFilesReport,
} from './file-existence-checker';

// Mock fs.access
vi.mock('fs/promises', () => {
  const mockAccess = vi.fn();
  return {
    default: {
      access: mockAccess,
    },
    access: mockAccess,
  };
});

describe('File Existence Checker @unit', () => {
  beforeEach(() => {
    vi.resetAllMocks();
  });

  it('should report missing document files', async () => {
    // Mock fs.access to throw for all files
    vi.mocked(fs.access).mockRejectedValue(new Error('File not found'));

    const references = [
      { id: 'index', type: 'doc' as const },
      { id: 'introduction', type: 'doc' as const },
    ];

    const missingFiles = await checkFilesExist('/site', references);

    expect(missingFiles).toHaveLength(2);
    expect(missingFiles[0]).toEqual({
      id: 'index',
      expectedPath: path.join('/site', 'docs', 'index.mdx'),
      type: 'doc',
    });
    expect(missingFiles[1]).toEqual({
      id: 'introduction',
      expectedPath: path.join('/site', 'docs', 'introduction.mdx'),
      type: 'doc',
    });
  });

  it('should not report existing document files', async () => {
    // Mock fs.access to succeed for the first file (index.md or index.mdx)
    vi.mocked(fs.access).mockImplementation((filePath) => {
      // The code checks for: /site/docs/index.md, /site/docs/index.mdx, 
      // /site/docs/index/index.md, /site/docs/index/index.mdx
      if (typeof filePath === 'string' && filePath.includes('docs/index.md')) {
        return Promise.resolve();
      }
      return Promise.reject(new Error('File not found'));
    });

    const references = [
      { id: 'index', type: 'doc' as const },
      { id: 'introduction', type: 'doc' as const },
    ];

    const missingFiles = await checkFilesExist('/site', references);

    expect(missingFiles).toHaveLength(1);
    expect(missingFiles[0]).toEqual({
      id: 'introduction',
      expectedPath: path.join('/site', 'docs', 'introduction.mdx'),
      type: 'doc',
    });
  });

  it('should check for index files in autogenerated directories', async () => {
    // Mock fs.access to succeed for directories but fail for index files
    vi.mocked(fs.access).mockImplementation((filePath) => {
      if (!filePath.includes('index.md') && !filePath.includes('index.mdx')) {
        return Promise.resolve();
      }
      return Promise.reject(new Error('File not found'));
    });

    const references = [
      {
        id: 'elements/auto',
        type: 'autogenerated' as const,
        dirName: 'elements/auto',
      },
    ];

    const missingFiles = await checkFilesExist('/site', references);

    expect(missingFiles).toHaveLength(1);
    expect(missingFiles[0]).toEqual({
      id: 'elements/auto/index',
      expectedPath: path.join('/site', 'docs', 'elements/auto', 'index.mdx'),
      type: 'doc',
    });
  });

  it('should report missing autogenerated directories', async () => {
    // Mock fs.access to fail for directories
    (fs.access as any).mockRejectedValue(new Error('Directory not found'));

    const references = [
      {
        id: 'elements/auto',
        type: 'autogenerated' as const,
        dirName: 'elements/auto',
      },
    ];

    const missingFiles = await checkFilesExist('/site', references);

    expect(missingFiles).toHaveLength(1);
    expect(missingFiles[0]).toEqual({
      id: 'elements/auto',
      expectedPath: path.join('/site', 'docs', 'elements/auto'),
      type: 'autogenerated',
    });
  });

  it('should generate a report for missing files', () => {
    const missingFiles = [
      {
        id: 'index',
        expectedPath: '/site/docs/index.mdx',
        type: 'doc' as const,
      },
      {
        id: 'elements/auto',
        expectedPath: '/site/docs/elements/auto',
        type: 'autogenerated' as const,
      },
    ];

    const report = generateMissingFilesReport(missingFiles);

    expect(report).toContain('Found 2 missing files');
    expect(report).toContain('## Missing Document Files');
    expect(report).toContain('`index`');
    expect(report).toContain('## Missing Autogenerated Directories');
    expect(report).toContain('`elements/auto`');
  });

  it('should generate a success report when no files are missing', () => {
    const report = generateMissingFilesReport([]);

    expect(report).toContain('All sidebar references have corresponding files');
  });
});
