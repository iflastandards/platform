name: Deploy Preview (Phase 5 Compliant)
# Phase 5: CI Environment Tests - Deploy to preview and validate environment only
# Assumes all code quality tests (Phases 1-4) have already passed locally

on:
  push:
    branches: [preview]
  workflow_dispatch:
    inputs:
      force_admin_deploy:
        description: 'Force admin deployment even if not affected'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: "preview-deploy-${{ github.ref }}"
  cancel-in-progress: true

env:
  # CI environment
  CI: true
  HUSKY: 0
  
  # Preview environment
  DOCS_ENV: preview
  NODE_OPTIONS: "--max-old-space-size=8192"
  
  # GitHub API for health checks
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Step 1: Environment validation ONLY
  validate-environment:
    name: Phase 5 - Environment Validation
    runs-on: ubuntu-latest
    environment: Preview
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone for speed
          
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          
      - name: Install dependencies (minimal)
        run: |
          echo "üì¶ Installing dependencies for environment tests only..."
          pnpm install --frozen-lockfile --ignore-scripts
          
      - name: Phase 5 - Environment Variable Validation
        run: |
          echo "üîê Phase 5: Validating environment variables..."
          
          # Required for preview environment
          required_vars=(
            "NEXT_PUBLIC_SUPABASE_URL"
            "NEXT_PUBLIC_SUPABASE_ANON_KEY"
            "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY"
            "CLERK_SECRET_KEY"
          )
          
          missing=()
          for var in "${required_vars[@]}"; do
            if [[ -z "${!var}" ]]; then
              missing+=("$var")
            fi
          done
          
          if [ ${#missing[@]} -gt 0 ]; then
            echo "‚ùå Missing required environment variables:"
            printf '%s\n' "${missing[@]}"
            exit 1
          fi
          
          echo "‚úÖ All required environment variables present"
          
      - name: Phase 5 - API Token Validation
        run: |
          echo "üîë Phase 5: Validating API tokens..."
          
          # Test Supabase connection with better error handling
          echo "Testing Supabase endpoint: $NEXT_PUBLIC_SUPABASE_URL/rest/v1/"
          supabase_response=$(curl -s -w "%{http_code}" -o /tmp/supabase_response.txt \
            "$NEXT_PUBLIC_SUPABASE_URL/rest/v1/" \
            -H "apikey: $NEXT_PUBLIC_SUPABASE_ANON_KEY" \
            --max-time 30 || echo "000")
          
          if [ "$supabase_response" = "200" ] || [ "$supabase_response" = "404" ]; then
            echo "‚úÖ Supabase API token valid (HTTP $supabase_response)"
          else
            echo "‚ö†Ô∏è Supabase API validation inconclusive (HTTP $supabase_response)"
            echo "Response body:"
            cat /tmp/supabase_response.txt || echo "No response body"
            echo "Note: Continuing deployment as this may be a network issue"
          fi
          
          # Test GitHub API access (use repo endpoint which GitHub Actions token can access)
          github_response=$(curl -s -w "%{http_code}" -o /tmp/github_response.txt \
            "https://api.github.com/repos/$GITHUB_REPOSITORY" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --max-time 30 || echo "000")
          
          if [ "$github_response" = "200" ]; then
            echo "‚úÖ GitHub API token valid"
          else
            echo "‚ùå GitHub API token validation failed (HTTP $github_response)"
            echo "Response body:"
            cat /tmp/github_response.txt || echo "No response body"
            exit 1
          fi
          
      - name: Phase 5 - External Service Connectivity
        run: |
          echo "üåê Phase 5: Testing external service connectivity..."
          
          # Test external services reachable from CI (non-blocking)
          services=(
            "https://api.github.com"
            "https://clerk.com"
            "$NEXT_PUBLIC_SUPABASE_URL"
          )
          
          failed_services=()
          for service in "${services[@]}"; do
            if curl -s -f --max-time 10 "$service" > /dev/null; then
              echo "‚úÖ $service reachable"
            else
              echo "‚ö†Ô∏è $service not reachable (may be temporary)"
              failed_services+=("$service")
            fi
          done
          
          if [ ${#failed_services[@]} -gt 0 ]; then
            echo "‚ö†Ô∏è Some services were not reachable, but continuing deployment"
            echo "Failed services: ${failed_services[*]}"
            echo "Note: This may be due to temporary network issues or service maintenance"
          else
            echo "‚úÖ All external services reachable"
          fi
          
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

  # Step 2: Build and deploy (assumes code is already validated locally)
  build-and-deploy:
    name: Build and Deploy to Preview
    needs: validate-environment
    runs-on: ubuntu-latest
    environment: Preview
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build all sites (no testing - assumes local validation passed)
        run: |
          echo "üèóÔ∏è Building all sites for preview deployment..."
          echo "Note: Skipping tests - assumes Phases 1-4 passed locally"
          
          # Build theme package
          pnpm nx run @ifla/theme:build
          
          # Build all documentation sites
          pnpm nx run-many \
            --target=build \
            --projects=portal,isbdm,lrm,frbr,isbd,muldicat,unimarc \
            --parallel=3
            
      - name: Create unified build directory
        run: |
          echo "üì¶ Creating unified build directory..."
          node scripts/create-unified-build.js --env preview
          echo "iflastandards.github.io" > _site/CNAME
          touch _site/.nojekyll
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Step 3: Admin deployment (if affected)
  deploy-admin:
    name: Deploy Admin to Vercel
    needs: [validate-environment, build-and-deploy]
    if: ${{ github.event.inputs.force_admin_deploy == 'true' || contains(github.event.head_commit.modified, 'apps/admin/') }}
    runs-on: ubuntu-latest
    environment: Preview
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          
       - name: Install dependencies
         run: pnpm install --frozen-lockfile
         
       - name: Build admin app (no testing - assumes local validation passed)        run: |
          echo "üèóÔ∏è Building admin app for preview..."
          pnpm nx build admin          
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/admin
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: |
            admin-preview.iflastandards.info
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

  # Step 4: Post-deployment environment validation
  post-deploy-validation:
    name: Phase 5 - Post-Deployment Validation
    needs: [build-and-deploy, deploy-admin]
    if: always() && needs.build-and-deploy.result == 'success'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: "GitHub Pages"
            url: "https://iflastandards.github.io/platform/"
            expected_status: 200
            
          - service: "Portal Homepage"
            url: "https://iflastandards.github.io/platform/index.html"
            expected_status: 200
            
          - service: "ISBDM Site"
            url: "https://iflastandards.github.io/platform/ISBDM/"
            expected_status: 200
            
      fail-fast: false
    steps:
      - name: Phase 5 - Deployment Health Check
        run: |
          echo "üîç Phase 5: Checking ${{ matrix.service }} deployment..."
          
          # Wait for deployment propagation
          sleep 30
          
          # Try up to 3 times
          for i in 1 2 3; do
            status=$(curl -s -o /dev/null -w "%{http_code}" "${{ matrix.url }}" || echo "000")
            echo "Attempt $i: HTTP status $status"
            
            if [ "$status" -eq "${{ matrix.expected_status }}" ]; then
              echo "‚úÖ ${{ matrix.service }} deployment healthy"
              exit 0
            fi
            
            [ $i -lt 3 ] && sleep 10
          done
          
          echo "‚ùå ${{ matrix.service }} deployment health check failed"
          exit 1

  # Step 5: Summary
  deployment-summary:
    name: Phase 5 - Deployment Summary
    needs: [build-and-deploy, deploy-admin, post-deploy-validation]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create deployment summary
        run: |
          cat > deployment-summary.md << 'EOF'
          # üìã Phase 5 - Preview Deployment Summary
          
          ## Environment Validation ‚úÖ
          - Environment variables validated
          - API tokens verified
          - External services connectivity confirmed
          
          ## üåê Deployed URLs
          - Portal: https://iflastandards.github.io/platform/
          - ISBDM: https://iflastandards.github.io/platform/ISBDM/
          - LRM: https://iflastandards.github.io/platform/LRM/
          - FRBR: https://iflastandards.github.io/platform/FRBR/
          - ISBD: https://iflastandards.github.io/platform/isbd/
          - MulDiCat: https://iflastandards.github.io/platform/muldicat/
          - UNIMARC: https://iflastandards.github.io/platform/unimarc/
          
          ## Phase 5 Focus
          This deployment workflow focused ONLY on:
          - ‚úÖ Environment-specific validation
          - ‚úÖ Deployment infrastructure
          - ‚úÖ Post-deployment health checks
          
          Code quality, tests, and builds were validated locally in Phases 1-4.
          
          ---
          üïê Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          EOF
          
      - name: Add to job summary
        run: |
          cat deployment-summary.md >> $GITHUB_STEP_SUMMARY