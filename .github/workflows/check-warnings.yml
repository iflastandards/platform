name: Check Build Warnings

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  check-warnings:
    name: Check Docusaurus Build Warnings
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build theme package
        run: pnpm nx build @ifla/theme
        
      - name: Collect build warnings
        id: warnings
        run: |
          node scripts/collect-warnings-parallel.js
          
          # Extract warning count for PR comment
          if [ -f "_reports/build-warnings.json" ]; then
            WARNING_COUNT=$(jq '[.[] | .warnings | length] | add' _reports/build-warnings.json)
            echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
          else
            echo "warning_count=0" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload warnings report
        uses: actions/upload-artifact@v4
        with:
          name: docusaurus-build-warnings
          path: _reports/
          retention-days: 30
          
      - name: Comment PR with summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const warningCount = ${{ steps.warnings.outputs.warning_count }};
            
            let comment = '## 📊 Docusaurus Build Report\n\n';
            
            if (warningCount === 0) {
              comment += '✅ **All builds completed successfully with no warnings!**\n';
            } else {
              comment += `⚠️ **Found ${warningCount} warning${warningCount === 1 ? '' : 's'} across all documentation sites.**\n\n`;
              
              // Read summary if available
              try {
                const summaryPath = '_reports/build-warnings-summary.md';
                if (fs.existsSync(summaryPath)) {
                  const summary = fs.readFileSync(summaryPath, 'utf8');
                  // Extract just the site summary
                  const lines = summary.split('\n');
                  const siteSection = lines.findIndex(line => line.includes('## By Site'));
                  if (siteSection !== -1) {
                    comment += '### Summary by Site\n';
                    let i = siteSection + 2;
                    while (i < lines.length && lines[i].startsWith('- ')) {
                      comment += lines[i] + '\n';
                      i++;
                    }
                  }
                }
              } catch (e) {
                console.error('Could not read summary:', e);
              }
              
              comment += '\n📄 [View full report in build artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n';
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 📊 Docusaurus Build Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment,
              });
            }
            
      - name: Create issue for daily check
        if: github.event_name == 'schedule' && steps.warnings.outputs.warning_count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const warningCount = ${{ steps.warnings.outputs.warning_count }};
            const date = new Date().toISOString().split('T')[0];
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Docusaurus Build Warnings - ${date}`,
              body: `The daily build check found **${warningCount}** warnings in the documentation sites.\n\n[View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n---\n_This issue was automatically created by the daily warning check._`,
              labels: ['documentation', 'build-warnings', 'automated'],
            });