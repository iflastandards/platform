import { test, expect } from '@playwright/test';
import selectors from '../selectors';

test.describe('Site Management Workflow with newtest', () => {
  test.beforeEach(async ({ page, context }) => {
    // Mock authentication for testing
    await context.addCookies([
      {
        name: 'next-auth.session-token',
        value: 'mock-admin-session',
        domain: 'localhost',
        path: '/',
        httpOnly: true,
        secure: false,
      },
    ]);
  });

  test('should navigate from newtest site to admin portal', async ({ page }) => {
    // Start at the newtest site
    await page.goto('http://localhost:3008');
    
    // Wait for the site to load
    await expect(page.getByText('New Test Site')).toBeVisible();
    
    // Look for site management link (would be added via SiteManagementLink component)
    const adminLink = page.getByRole('link', { name: /site management|admin/i });
    
    if (await adminLink.isVisible()) {
      await adminLink.click();
      
      // Should navigate to admin portal for this site
      await expect(page).toHaveURL(/localhost:3007.*newtest/);
    } else {
      // Manually navigate to test the admin portal
      await page.goto(`${selectors.sites.urls.admin}${selectors.dashboard.routes.namespace('newtest')}`);
    }
    
    // Verify we're in the admin portal
    await expect(page.getByText(/New Test Site.*Management/)).toBeVisible();
  });

  test('should display site overview information', async ({ page }) => {
    await page.goto(`${selectors.sites.urls.admin}${selectors.dashboard.routes.namespace('newtest')}`);
    
    // Check overview tab is active by default
    await expect(page.getByRole('tab', { name: 'Overview' })).toHaveAttribute('aria-selected', 'true');
    
    // Verify overview content
    await expect(page.getByText('Site Status')).toBeVisible();
    await expect(page.getByText('Last Updated')).toBeVisible();
    
    // Check for live site link
    const liveSiteLink = page.getByRole('link', { name: /view live site/i });
    await expect(liveSiteLink).toBeVisible();
    await expect(liveSiteLink).toHaveAttribute('href', expect.stringContaining('newtest'));
  });

  test('should navigate between all management tabs', async ({ page }) => {
    await page.goto(`${selectors.sites.urls.admin}${selectors.dashboard.routes.namespace('newtest')}`);
    
    // Test each tab
    const tabs = ['Overview', 'Content', 'GitHub', 'Build & Deploy', 'Settings'];
    
    for (const tabName of tabs) {
      // Click tab
      await page.getByRole('tab', { name: tabName }).click();
      
      // Verify tab is active
      await expect(page.getByRole('tab', { name: tabName })).toHaveAttribute('aria-selected', 'true');
      
      // Verify tab content is visible
      switch (tabName) {
        case 'Overview':
          await expect(page.getByText('Site Status')).toBeVisible();
          break;
        case 'Content':
          await expect(page.getByText('Content Management')).toBeVisible();
          break;
        case 'GitHub':
          await expect(page.getByText('Repository Information')).toBeVisible();
          break;
        case 'Build & Deploy':
          await expect(page.getByText('Build & Deployment')).toBeVisible();
          break;
        case 'Settings':
          await expect(page.getByText('Site Settings')).toBeVisible();
          break;
      }
    }
  });

  test('should display GitHub integration information', async ({ page }) => {
    await page.goto(`${selectors.sites.urls.admin}${selectors.dashboard.routes.namespace('newtest')}`);
    
    // Navigate to GitHub tab
    await page.getByRole('tab', { name: 'GitHub' }).click();
    
    // Verify GitHub information
    await expect(page.getByText(/iflastandards\/standards-dev/)).toBeVisible();
    
    // Check for GitHub links
    const repoLink = page.getByRole('link', { name: /view repository/i });
    await expect(repoLink).toBeVisible();
    await expect(repoLink).toHaveAttribute('href', 'https://github.com/iflastandards/standards-dev');
    
    // Check for issues and PRs sections
    await expect(page.getByText('Issues')).toBeVisible();
    await expect(page.getByText('Pull Requests')).toBeVisible();
  });

  test('should show content management options', async ({ page }) => {
    await page.goto(`${selectors.sites.urls.admin}${selectors.dashboard.routes.namespace('newtest')}`);
    
    // Navigate to Content tab
    await page.getByRole('tab', { name: 'Content' }).click();
    
    // Verify content management sections
    await expect(page.getByText('Documentation')).toBeVisible();
    await expect(page.getByText('Blog Posts')).toBeVisible();
    
    // Check for edit buttons/links
    const editButtons = page.getByRole('button', { name: /edit/i });
    const editLinks = page.getByRole('link', { name: /edit/i });
    
    const hasEditControls = (await editButtons.count()) > 0 || (await editLinks.count()) > 0;
    expect(hasEditControls).toBeTruthy();
  });

  test('should display build and deployment status', async ({ page }) => {
    await page.goto(`${selectors.sites.urls.admin}${selectors.dashboard.routes.namespace('newtest')}`);
    
    // Navigate to Build & Deploy tab
    await page.getByRole('tab', { name: 'Build & Deploy' }).click();
    
    // Verify build information
    await expect(page.getByText('Build Status')).toBeVisible();
    
    // Check for build trigger button
    const triggerButton = page.getByRole('button', { name: /trigger build/i });
    await expect(triggerButton).toBeVisible();
    
    // Verify button is clickable (but don't actually trigger)
    await expect(triggerButton).toBeEnabled();
  });

  test('should show site settings configuration', async ({ page }) => {
    await page.goto(`${selectors.sites.urls.admin}${selectors.dashboard.routes.namespace('newtest')}`);
    
    // Navigate to Settings tab
    await page.getByRole('tab', { name: 'Settings' }).click();
    
    // Verify settings content
    await expect(page.getByText('Configuration')).toBeVisible();
    
    // Check for settings form elements
    const formElements = await page.locator('input, select, textarea').count();
    expect(formElements).toBeGreaterThan(0);
  });

  test('should handle direct site access workflow', async ({ page }) => {
    // Test the direct site access route
    await page.goto(`${selectors.sites.urls.admin}/site/newtest`);
    
    // Should redirect to dashboard for authenticated user
    await expect(page).toHaveURL(/.*dashboard\/newtest/);
    await expect(page.getByText(/New Test Site.*Management/)).toBeVisible();
  });

  test('should validate live site integration', async ({ page }) => {
    await page.goto(`${selectors.sites.urls.admin}${selectors.dashboard.routes.namespace('newtest')}`);
    
    // Get the live site link
    const liveSiteLink = page.getByRole('link', { name: /view live site/i });
    
    // Open in new tab to test the actual newtest site
    const [newPage] = await Promise.all([
      page.context().waitForEvent('page'),
      liveSiteLink.click()
    ]);
    
    await newPage.waitForLoadState();
    
    // Verify we're on the newtest site
    await expect(newPage).toHaveURL(/localhost:3008/);
    await expect(newPage.getByText('New Test Site')).toBeVisible();
    await expect(newPage.getByText('Testing our scaffolding system')).toBeVisible();
    
    await newPage.close();
  });

  test('should handle error states gracefully', async ({ page }) => {
    // Test navigation to non-existent site
    await page.goto(`${selectors.sites.urls.admin}/dashboard/nonexistent-site`);
    
    // Should handle gracefully (either redirect or show error)
    const isErrorPage = await page.getByText(/not found|error|invalid/i).isVisible().catch(() => false);
    const isRedirected = !page.url().includes('nonexistent-site');
    
    expect(isErrorPage || isRedirected).toBeTruthy();
  });

});
