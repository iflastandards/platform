name: build-preview
on: 
  # Disabled - superseded by nx-smart-deploy.yml
  # push:
  #   branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force build all sites'
        required: false
        default: 'true'
        type: boolean
permissions: {contents: write}
jobs:
  site:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for NX affected

      - uses: pnpm/action-setup@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          
      - run: pnpm install --no-frozen-lockfile

      - name: Set NX SHAs for affected detection
        uses: nrwl/nx-set-shas@v4
        if: github.event_name == 'pull_request' && inputs.force_build_all != 'true'

      - name: Build affected or all sites
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ inputs.force_build_all }}" != "true" ]; then
            echo "Building affected sites only..."
            nx affected --target=build --parallel=1 --configuration=preview
          else
            echo "Building all sites..."
            nx run-many --target=build --all --parallel=1 --configuration=preview
          fi
        env:
          DOCS_ENV: preview
          BASE_URL_PREFIX: /standards-dev/
          NODE_ENV: production

      - name: Combine builds using NX project graph
        run: |
          mkdir -p build
          
          # Get all built projects dynamically
          for project in $(nx show projects --type=app); do
            # Determine project path
            if [ "$project" = "portal" ]; then
              project_path="portal"
            else
              project_path="standards/${project}"
            fi
            
            # Check if build exists for this project
            if [ -d "${project_path}/build" ]; then
              echo "Copying build for $project..."
              if [ "$project" = "portal" ]; then
                # Portal goes to root and /portal
                cp -r ${project_path}/build/* build/ 2>/dev/null || true
                mkdir -p build/portal
                cp -r ${project_path}/build/* build/portal/
              else
                # Standards go to their respective folders
                mkdir -p build/${project}
                cp -r ${project_path}/build/* build/${project}/
              fi
            fi
          done
          
      - name: Deploy to gh-pages
        if: github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: build