# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Core Development Workflows

### Essential Commands
- **Package manager**: Always use `pnpm` (never npm or yarn)
- **Build single site**: `nx build {name}` (e.g., `nx build portal`, `nx build isbdm`, `nx build admin-portal`)
- **Start dev server**: `nx start {site}` or `nx run {site}:start:robust` (with port cleanup)
- **Start Next.js dev**: `nx dev admin-portal` (for admin-portal development)
- **Serve built site**: `nx serve {site}` or `nx run {site}:serve:robust` (with port cleanup)
- **Test execution**: `pnpm test` (nx affected with parallel execution)
- **Type checking**: `pnpm typecheck` (nx affected with parallel execution)
- **Linting**: `pnpm lint` (nx affected with parallel execution)

### Site Scaffolding
- **Create new site**: `pnpm tsx scripts/scaffold-site.ts --siteKey=newsite --title="New Standard" --tagline="A new IFLA standard"`
- **Template location**: Complete site template in `scripts/scaffold-template/` with ISBD-matching structure
- **Generated files**: `docusaurus.config.ts`, `project.json`, all content pages, and CompactButton component
- **Features**: Tabbed overview pages, comprehensive documentation structure, Nx integration
- **Documentation**: See `developer_notes/current-scaffolding-plan.md` for complete system details

### Nx Workflow Benefits
- **Smart Caching**: Nx caches build outputs, test results, and lint results locally and in the cloud
- **Affected Detection**: Only builds/tests projects that have changed or are affected by changes
- **Parallel Execution**: Runs tasks in parallel across multiple CPU cores for optimal performance
- **Distributed Execution**: CI jobs can run across multiple agents for faster completion
- **Task Pipeline Configuration**: `dependsOn` rules ensure correct build order (theme builds first, then sites in parallel)
- **Cache optimization**: Nx caching reduces build times by ~70% in CI environments

### Performance Guidelines
- Prefer `nx build portal` over `pnpm build:portal` for better caching
- Use `nx affected --target=build` for faster builds in PRs
- Use `:robust` variants (e.g., `nx run portal:start:robust`) for automatic port conflict resolution
- Use `nx run-many --target=test --all` for parallel test execution across all projects

## Testing Infrastructure

### 5-Group Testing Strategy

#### Group 1: Selective Tests (On-Demand Development)
- **Individual unit tests**: `nx test portal`, `nx test @ifla/theme`, `nx test isbdm`, `nx test admin-portal`
- **Affected tests**: `pnpm test` (now Nx-optimized: `nx affected --target=test --parallel=3`)
- **All unit tests**: `pnpm test:all` (parallel across all projects)
- **E2E by browser**: `pnpm test:e2e:chromium`, `pnpm test:e2e:firefox`, `pnpm test:e2e:mobile`
- **Debug E2E**: `pnpm test:e2e:debug`, `pnpm test:e2e:ui`
- **Visual regression**: `pnpm test:regression:visual`
- **Target**: < 30s

#### Group 2: Comprehensive Tests (Test Everything)
- **Full suite**: `pnpm test:comprehensive` (typecheck + lint + test + build + E2E)
- **All unit tests**: `pnpm test:comprehensive:unit`
- **All E2E tests**: `pnpm test:comprehensive:e2e`
- **All builds**: `pnpm test:comprehensive:builds`
- **Target**: < 300s

#### Group 3: Pre-Commit Tests (Git Hook - Fast Feedback)
- **Automatic**: Runs on `git commit`
- **Manual**: `pnpm test:pre-commit`
- **What runs**: `nx affected --targets=typecheck,lint,test:unit --parallel=3` + config validation
- **Target**: < 60 seconds

#### Group 4: Pre-Push Tests (Git Hook - Deployment Focus)
- **Automatic**: Runs on `git push` (branch-aware)
- **Manual**: `pnpm test:pre-push`
- **Feature branch**: Fast validation only
- **Protected branch**: Full affected testing + builds
- **Target**: < 180 seconds

#### Group 5: CI Tests (Environment/Infrastructure Focus)
- **CI suite**: `pnpm test:ci` (deployment-critical tests only)
- **Connectivity**: `pnpm test:ci:connectivity` (external services)
- **Config validation**: `pnpm test:ci:config` (production environment)
- **Focus**: Environment-specific issues, not development tools
- **Target**: < 180s

### Test Commands

#### Unit/Integration Tests (Vitest)
```bash
# All projects unit tests
nx test
nx run-many --target=test --all

# Specific project testing
nx test @ifla/theme              # Theme package tests
nx test portal                   # Portal site tests  
nx test isbdm                    # ISBDM standard tests
nx test admin-portal             # Admin portal tests (Vitest + RTL)

# Development workflow
nx test --watch                  # Watch mode
nx test --ui                     # Open Vitest UI
nx affected --target=test        # Only test affected projects
```

Standardized test targets:
- **`test`**: Full test suite for the project
- **`test:unit`**: Unit tests only (fast feedback, excludes external dependencies)
- **`test:integration`**: Integration tests only (external APIs, file system, CLI tools)

#### E2E Tests (Playwright)
```bash
# Workspace-level E2E
nx run standards-dev:e2e              # Full E2E suite
nx run standards-dev:e2e:ui           # Interactive mode
nx run standards-dev:e2e:site-validation   # Site validation only
nx run standards-dev:e2e:fail-fast    # Stop on first failure

# Admin portal E2E with fail-fast
nx run standards-dev:e2e:admin-portal:fail-fast

# Project-specific E2E  
nx run portal:e2e                     # Portal smoke tests
nx run isbdm:e2e                      # ISBDM + vocabulary tests

# Environment-specific validation
nx run standards-dev:e2e:site-validation:production
nx run standards-dev:e2e:site-validation:preview

# Multi-browser testing
npx playwright test --project=chromium
npx playwright test --project="Mobile Chrome"
npx playwright test --debug          # Step through tests
npx playwright test --headed         # Watch execution
npx playwright test --ui             # Interactive UI
```

E2E Features:
- **Dynamic URLs**: Tests automatically adapt to different environments
- **Cross-domain Authentication**: Tests validate authentication flows between admin portal and Docusaurus sites
- **CORS Integration**: Tests verify cross-origin session sharing and cookie handling
- **Auto-server**: Starts `pnpm start:all` for local development
- **CI Optimization**: Sequential execution, retry logic
- **Multi-device**: Desktop and mobile viewport testing

#### Build & Configuration Testing
```bash
# NX build testing
nx run standards-dev:build-all        # All sites parallel build
nx run standards-dev:build-affected   # Only affected sites
nx run standards-dev:validate:builds  # Post-build validation

# Script-based testing
node scripts/test-site-builds.js --site all --env production
node scripts/test-site-builds.js --site portal --env local --skip-build

# Regression testing
nx run standards-dev:regression:full  # All checks + builds + E2E
nx run standards-dev:regression:fast  # Affected-only for feature branches
```

#### Deployment Debugging
Always check the nx-mcp deployment logs when debugging deployment problems

### Test Placement Decision Tree

```
📁 Test Placement Decision Tree
│
├── 🔧 Unit Tests (Pure logic, no external deps)
│   └── 📍 Location: `packages/theme/src/tests/components/ComponentName.test.tsx`
│   └── 🎯 Target: Runs in `test:unit` (pre-commit) + `test` (comprehensive)
│   └── ✅ Examples: Component rendering, pure functions, config parsing
│
├── 🔗 Integration Tests (External APIs, file system, CLI tools)
│   ├── 📍 Scripts: `packages/theme/src/tests/scripts/`
│   ├── 📍 External Services: `packages/theme/src/tests/deployment/`
│   └── 🎯 Target: Only runs in `test:integration` (comprehensive testing)
│   └── ✅ Examples: Google Sheets API, file operations, CLI execution
│
├── 🌐 E2E Tests (Browser automation, full user workflows)
│   ├── 📍 Workspace: `/e2e/site-validation.spec.ts`
│   ├── 📍 Site-specific: `standards/SITE/e2e/feature.e2e.test.ts`
│   └── 🎯 Target: `nx run standards-dev:e2e` or `nx run SITE:e2e`
│   └── ✅ Examples: Navigation, form submission, visual checks
│
└── 🎯 Performance/Visual (Screenshots, load testing)
    └── 📍 Location: `/e2e/visual-regression-enhanced.spec.ts`
    └── 🎯 Target: Specialized E2E runs
```

**Quick Decision Questions:**
1. **Does it make network calls or use external APIs?** → Integration test
2. **Does it render in a browser or test user flows?** → E2E test  
3. **Does it test component logic in isolation?** → Unit test
4. **Does it validate file system operations?** → Integration test
5. **Does it test configuration parsing only?** → Unit test

### Test Coverage by Scenario

| Scenario | Unit Tests | Integration Tests | E2E Tests | When It Runs |
|----------|------------|-------------------|-----------|--------------|
| **Pre-commit** | ✅ Fast feedback | ❌ Too slow | ❌ Too slow | Every `git commit` |
| **Pre-push** | ✅ | ✅ | ❌ | Every `git push` |  
| **Comprehensive** | ✅ | ✅ | ✅ | Manual/CI full runs |
| **Affected** | ✅ Only changed | ✅ Only changed | ❌ | Development workflow |
| **CI** | ✅ | ✅ | ✅ | Production deployments |

### Test Utilities

For consistent directory handling in tests, use the `workspaceUtils` helper:

```typescript
import { findWorkspaceRoot, getScriptPath, setupTestPaths } from '../utils/workspaceUtils';

// Get workspace root reliably (instead of process.cwd())
const workspaceRoot = findWorkspaceRoot();

// Get path to scripts
const scriptPath = getScriptPath('vocabulary-comparison.mjs');

// Get common test paths
const { workspaceRoot, scriptsDir, tmpDir, packagesDir, themeDir } = setupTestPaths();
```

**Always use `workspaceUtils` instead of `process.cwd()` in integration tests** to ensure consistent directory resolution.

### E2E Authentication Testing Guidelines

**Critical**: All authentication E2E tests must validate URL attributes to prevent hardcoded URL regressions:

```typescript
// ✅ Correct: Validate href attributes against environment config
const loginLink = page.getByRole('link', { name: /editor login/i });
await expect(loginLink).toHaveAttribute('href', adminConfig.signinUrl);

// ✅ Regression tests: Ensure NOT using hardcoded URLs
await expect(loginLink).not.toHaveAttribute('href', 'https://your-next-app.com/login');
await expect(loginLink).not.toHaveAttribute('href', 'http://localhost:3001/signin');
```

**E2E Test Coverage Requirements for Authentication:**
- **URL Validation**: All authentication dropdown links (Login, Manage, Logout)
- **Role-based Access**: Verify "Manage" link visibility based on user roles
- **Checkbox Functionality**: "Keep me logged in" persistence and cross-tab sync
- **Error Handling**: Graceful degradation when admin portal is unreachable
- **Environment Awareness**: URL generation works across all environments

### Test File Organization
```
packages/theme/src/tests/
├── components/                    # Component unit tests
├── config/                        # Configuration tests  
├── scripts/                       # Build script tests
├── fixtures/                      # Test data and mocks
├── __mocks__/                     # Docusaurus mocks
└── setup.ts                       # Test environment setup

e2e/
├── site-validation.spec.ts        # Comprehensive site validation
├── visual-regression.spec.ts      # UI screenshot tests
├── portal-smoke.spec.ts           # Portal-specific tests
└── admin-portal/
    ├── auth.e2e.test.ts
    ├── cross-site-auth-communication.e2e.test.ts
    ├── auth-dropdown-validation.e2e.test.ts
    └── site-management-workflow.e2e.test.ts
```

## Build System Architecture

### Nx Monorepo Configuration
- **Workspace coordination**: Nx provides optimal caching and task orchestration
- **Docusaurus v3.8**: All documentation sites use Docusaurus for generation
- **Build targets**: Each site is an independent Nx project with its own build target
- **Theme package**: Custom `@ifla/theme` package provides shared components and configuration

### Nx Dependency Management
- **Automatic theme rebuilds**: All sites depend on `@ifla/theme` and rebuild when theme changes
- **Input patterns**: `docusaurus` and `docusaurus-no-theme` inputs optimize cache invalidation
- **Implicit dependencies**: Sites have `"implicitDependencies": ["@ifla/theme"]` for proper dependency tracking
- **Affected commands**: `nx affected` automatically detects which projects need rebuilding
- **Parallel execution**: Up to 6 concurrent processes for optimal performance
- **Cache optimization**: Nx caching reduces build times by ~70% in CI environments

### Critical Build Configuration
**REQUIRED for all sites** - Include this in every `docusaurus.config.ts`:
```typescript
future: {
  v4: true,
  experimental_faster: true,  // CRITICAL: Fixes static state contamination
},
```
This prevents cross-site contamination during builds where sites inherit each other's configurations.

### Static State Contamination Issue
- **Problem**: Multi-site builds can cause sites to inherit configuration from previously built sites
- **Root Cause**: Module-level static state contamination in shared modules
- **Solution**: `experimental_faster: true` enables better module isolation
- **Evidence Pattern**:
  - Acceptable: `/site/intro` (correct baseURL, missing page)
  - Problematic: `/wrong-site/intro` (wrong baseURL, configuration contamination)

### Site Configuration System
The project migrated (December 2024) from shared-config to **self-contained configurations**:

- **Configuration source**: `packages/theme/src/config/siteConfig.ts` (single source of truth)
- **Environment handling**: Set via `DOCS_ENV` environment variable (local, preview, development, production)
- **Inter-site navigation**: Use `SiteLink` component from theme, never hardcode URLs
- **Site generation**: Use `scripts/generate-individual-config.ts` for creating new site configs
- **Environment isolation**: DOCS_ENV only used in `docusaurus.config.ts`, stored in customFields
- **SiteConfigMap**: Available to all components via Docusaurus context for inter-site navigation

## Project Architecture

### Monorepo Structure
```
standards-dev/
├── apps/admin-portal/         # Next.js admin application with GitHub OAuth
├── portal/                    # Main IFLA portal site
├── standards/{site}/          # Individual standard documentation sites
├── packages/theme/            # Custom Docusaurus theme with shared components
├── scripts/                   # Build automation and site generation scripts
└── developer_notes/           # Architecture documentation
```

### Site Types and Patterns
1. **Portal** (`portal/`): Main landing site with management interface
2. **Standards** (`standards/{name}/`): Individual standard documentation (ISBDM, LRM, FRBR, isbd, muldicat, unimarc, newtest)
3. **Admin Portal** (`apps/admin-portal/`): Next.js application for administrative tasks
4. **All Docusaurus sites** use the same theme package but have unique configurations

### Key Configuration Patterns
- **Template system**: `scripts/site-template.ts` and complete scaffold template in `scripts/scaffold-template/`
- **Individual configs**: Generated from template files with placeholder replacement
- **Rich content structure**: Tabbed overview pages, comprehensive documentation, CompactButton components
- **Configuration templates**: `docusaurus.config.ts.template` and `project.json.template` for dynamic generation
- **Feature flags**: Support for custom sidebars, element redirects, RDF downloads, etc.

## Port Management System

### Port Mappings
- **Portal**: 3000, **ISBDM**: 3001, **LRM**: 3002, **FRBR**: 3003
- **ISBD**: 3004, **MulDiCat**: 3005, **UniMARC**: 3006, **NewTest**: 3008
- **Admin Portal**: 4200 (Next.js development server)

### Port Commands
- **Kill all ports**: `pnpm ports:kill` (silent) or `pnpm ports:kill:verbose`
- **Kill specific site**: `pnpm ports:kill:site isbd`
- **Robust server startup**: `pnpm start:robust` or `pnpm start:robust:nx`
- **Robust built site serving**: `pnpm serve:robust` or `pnpm serve:robust:nx`

### Nx-Integrated Commands
- **Single site robust start**: `nx run {site}:start:robust` (e.g., `nx run portal:start:robust`)
- **Single site robust serve**: `nx run {site}:serve:robust` (e.g., `nx run isbdm:serve:robust`)
- **All sites robust start**: `nx run standards-dev:start-all:robust`
- **All sites robust serve**: `nx run standards-dev:serve-all:robust`

### Port Management Components
- **Port Manager** (`scripts/utils/port-manager.js`): Detects and kills processes on specific ports
- **Robust Startup** (`scripts/start-with-port-cleanup.js`): Automatically clears ports before starting
- **Nx Targets**: All projects have `start:robust` and `serve:robust` targets integrated with port cleanup
- **Playwright Integration**: E2E tests use robust startup to prevent port conflicts

## Site-Specific Features

### ISBDM (Complex Configuration)
- **Custom sidebar generator**: Filters out index.mdx files automatically
- **Element redirects**: Redirects `/docs/elements/{id}` from legacy paths
- **Complex navbar**: Multi-level dropdown navigation structure

### Portal (Management Interface)
- **Site management**: Central dashboard for all IFLA sites
- **GitHub integration**: Direct links to projects, issues, PRs
- **Team management**: Organization-level tools

### Admin Portal (Next.js Application)
- **Technology stack**: Next.js 15.2.5 with App Router, NextAuth.js v4.24.11, TypeScript
- **Authentication**: GitHub OAuth with organization team role detection + cross-site session tracking
- **Development**: `nx dev admin-portal` (port 4200)
- **Build**: `nx build admin-portal`
- **Serve**: `nx serve admin-portal`
- **Environment variables**: `GITHUB_ID`, `GITHUB_SECRET`, `NEXTAUTH_URL`, `NEXTAUTH_SECRET`
- **Testing**: 
  - Unit: `nx test admin-portal` or `nx run admin-portal:test:unit`
  - Integration: `nx run admin-portal:test:integration`
  - E2E: `nx run standards-dev:e2e:admin-portal`
  - E2E fail-fast: `nx run standards-dev:e2e:admin-portal:fail-fast`
- **Test structure**:
  ```
  apps/admin-portal/src/test/
  ├── fixtures/mockData.ts           # Mock sessions, sites, GitHub data
  ├── mocks/api.ts                   # API response mocks
  ├── mocks/components.tsx           # React component mocks
  ├── components/                    # Unit tests
  ├── integration/                   # Integration tests
  └── setup.ts                      # Vitest configuration
  ```
- **Features**: 
  - Administrative interface for IFLA standards management
  - Cross-domain authentication with CORS-enabled session sharing
  - Environment-aware URLs (local/preview/development/production)
  - Uses 'newtest' site (port 3008) as testing target
- **Documentation**: See `developer_notes/admin-portal-authentication-architecture.md`

## Development Guidelines

### Testing Strategy
- **Pre-commit**: TypeScript, ESLint, unit tests run automatically
- **Pre-push**: Build regression tests (branch-aware) run automatically  
- **Test runner**: Vitest for unit/integration tests
- **E2E testing**: Playwright for interface testing
- **Always test before commits**: Tests must pass before offering to commit

### Scaffolding and Templates
- **CRITICAL**: Always check and update scaffolding templates when making configuration changes that affect all sites
- **Template location**: `scripts/scaffold-template/` with rich content structure
- **Scaffolding script**: `scripts/scaffold-site.ts` generates new sites from template
- **Pattern**: When fixing issues in existing sites, verify the scaffold template doesn't propagate the same issue
- **Documentation**: See `developer_notes/current-scaffolding-plan.md`

### Content and Navigation Rules
- **Never hardcode URLs**: Always use SiteLink component or configuration-based URLs
- **Broken links categorization**:
  - *Acceptable*: Links within correct baseURL to non-existent pages (future content)
  - *Problematic*: Links pointing to wrong baseURL/site (configuration errors)

### Complex Project Management
- **Planning approach**: Break complex projects into epics and tasks
- **Progress tracking**: Use TodoWrite/TodoRead tools for systematic tracking
- **Documentation**: Always consult Docusaurus v3.8 docs during planning

### Search and Code Discovery
- **Search priority**: 
  1. `/Users/jonphipps/Code/IFLA/standards-dev` first
  2. Git history/branches
  3. `/Users/jonphipps/Code/IFLA/`
- **Site URL references**: Use `/Users/jonphipps/Code/IFLA/standards-dev/packages/theme/src/config/siteConfig.ts`
- **Context7 integration**: Always use Context7 for code examples at session start

### Deployment and Build Management
- **Server coordination**: Ask user to start servers/builds rather than waiting for timeouts
- **Environment awareness**: Warn when environment isn't set to project root
- **Nx optimization**: Use nx cache for performance; only skip with `--skip-nx-cache` when debugging

## Vocabulary and Content Management

### RDF and Vocabulary Systems
- **Vocabulary generation**: `pnpm vocabulary:create` for creating vocabulary sheets
- **RDF export**: `pnpm vocab:release` for RDF generation
- **CSV validation**: Vocabulary tables support CSV profile validation

### Content Validation
- **Site links**: `pnpm validate:site-links`
- **Navigation**: `pnpm validate:navigation` 
- **Environment URLs**: `pnpm validate:env-urls`

## Git Hooks and CI/CD

### Pre-Commit Hook (Automatic < 60s)
Runs on every `git commit`:
- TypeScript checking: Full type validation
- ESLint validation: Code quality checks
- Unit tests: 446+ unit/integration tests
- Configuration validation: Site config validation without builds

### Pre-Push Hook (Branch-Aware)
Runs on `git push` with different strategies:

**Protected Branches (main/dev)**:
- Full portal production build
- ISBDM production build
- Portal E2E testing
- Complete regression suite
- Target: ~5-10 minutes

**Feature Branches**:
- Configuration validation only
- Representative build testing
- Abbreviated regression testing
- Target: ~2-3 minutes

### GitHub Actions Integration
- **Matrix builds**: All sites + admin-portal built in parallel
- **Environment testing**: Validates deployment configurations
- **URL validation**: Comprehensive link checking
- **Smart caching**: Nx cache optimization reduces CI time by ~70%

### Cost Optimization Strategy
- **Local Testing (Free)**: Comprehensive coverage via automated git hooks
- **CI Testing (Paid)**: Environment-specific validation only

## Dual CI Architecture

### Development Fork (jonphipps/standards-dev)
- **Remote**: `fork` → `git@github.com:jonphipps/standards-dev.git`
- **Workflow**: `.github/workflows/nx-optimized-ci.yml`
- **Purpose**: Comprehensive testing with Nx Cloud integration
- **Nx Cloud Workspace**: `6857fccbb755d4191ce6fbe4`
- **Command**: `git push-dev` (alias for `git push fork dev`)

### Preview Repo (iflastandards/standards-dev)  
- **Remote**: `origin` → `git@github.com:iflastandards/standards-dev.git`
- **Workflow**: `.github/workflows/preview-ci.yml`
- **Purpose**: Lightweight deployment validation + GitHub Pages deployment
- **Command**: `git push-preview` (alias for `git push origin dev`)

### Key Rules
- **NEVER push directly to origin/main** (production will be managed separately)
- **Development testing**: Always happens on fork with Nx Cloud
- **Client previews**: Push to origin/dev after development CI passes
- **Documentation**: See `docs/architecture/dual-ci-architecture.md`

## Role-Based Access Control (RBAC) with Cerbos

### Review Groups (RG)
- **LRM**: Library Reference Model
- **ISBD**: International Standard Bibliographic Description (contains isbd, isbdm + 7 planned sites)
- **MulDiCat**: Multilingual Dictionary of Cataloguing Terms
- **FR**: Functional Requirements (currently FRBR, needs renaming)
- **UNIMARC**: Universal MARC Format

### Three-Tier Permission Model
1. **System Level**: Global administrators (system-admin, ifla-admin)
2. **Review Group Level**: Review group administrators and roles ({rg}-admin, {rg}-editor, {rg}-reviewer, {rg}-translator)
3. **Site Level**: Site-specific administrators and roles ({site}-admin, {site}-editor, {site}-translator)

### Cerbos Integration
```
cerbos/
├── policies/
│   ├── resource_namespace.yaml    # Namespace permissions
│   ├── resource_site.yaml         # Site permissions
│   ├── resource_user_admin.yaml   # User management permissions
│   ├── resource_translation.yaml  # Translation permissions
│   └── derived_roles.yaml         # Role derivations
├── fixtures/                      # Test users and resources
└── .cerbos-hub.yaml              # Cerbos Hub configuration
```

### Testing with Roles
```bash
# Interactive role selection
pnpm test:admin:roles

# Test specific role/namespace combination
pnpm test:admin:roles --role editor --namespace ISBD

# Test site-specific role
pnpm test:admin:roles --role admin --site isbdm

# Test translator role across namespaces
pnpm test:admin:roles --role translator --namespaces ISBD,FR
```

### Development Workflow
- **Mock Authentication**: Development-only credentials provider
- **Visual indicators**: Show when using mock auth
- **Production**: GitHub OAuth exclusively
- **Implementation**: See `developer_notes/rbac-implementation-plan.md`

## API Documentation References

### Core Docusaurus v3.8
- **Main Documentation**: https://docusaurus.io/docs
- **CLI Reference**: https://docusaurus.io/docs/cli
- **API Reference**: https://docusaurus.io/docs/api/docusaurus-config
- **Plugin APIs**: https://docusaurus.io/docs/api/plugins
- **Theme APIs**: https://docusaurus.io/docs/api/themes

### Styling and UI
- **Infima CSS**: https://infima.dev/docs/
- **Styling Guide**: https://docusaurus.io/docs/styling-layout
- **MUI X Data Grid**: https://mui.com/x/react-data-grid/
- **MUI X Tree View**: https://mui.com/x/react-tree-view/
- **Base UI React**: https://base-ui.com/react/overview/quick-start

### Development Tools
- **TypeScript Support**: https://docusaurus.io/docs/typescript-support
- **MDX Documentation**: https://mdxjs.com/docs/
- **React Documentation**: https://react.dev/reference/react
- **FontAwesome React**: https://docs.fontawesome.com/web/use-with/react

### Community Resources
- **Docusaurus Community**: https://docusaurus.community/
- **Awesome Docusaurus**: https://github.com/weecology/awesome-docusaurus
- **Official Website Source**: https://github.com/facebook/docusaurus/tree/main/website

### Context7 MCP Integration
- **Real-time Examples**: Use Context7 MCP for live code examples
- **Type Definitions**: Prefer Context7 over static docs for up-to-date types
- **Plugin Discovery**: Use Context7 to find and evaluate community plugins

### API Usage Guidelines
1. **Configuration Changes**: Reference https://docusaurus.io/docs/api/docusaurus-config first
2. **Plugin Integration**: Check plugin APIs and lifecycle methods
3. **Theme Customization**: Use theme API for component overrides
4. **Version Compatibility**: Always verify Docusaurus version (≥3.8)
5. **TypeScript Types**: Prefer official TypeScript definitions
6. **Best Practices**: Follow patterns from official documentation
7. **Performance**: Reference optimization guides for build and runtime