#!/usr/bin/env node
import path from 'path';
import {
  checkFilesExist,
  generateMissingFilesReport,
} from './utils/file-existence-checker';
import {
  expandAutogeneratedReferences,
  extractSidebarReferencesFromFile,
} from './utils/sidebar-reference-extractor';

/**
 * Validates that all sidebar references have corresponding files
 * @param siteDir The site directory path
 * @param sidebarPath Path to the sidebar configuration file
 */
async function validateSidebarReferences(
  siteDir: string,
  sidebarPath: string,
): Promise<void> {
  console.log(`Validating sidebar references for ${siteDir}...`);

  try {
    // Extract references from sidebar
    const references = await extractSidebarReferencesFromFile(sidebarPath);
    console.log(`Found ${references.length} references in sidebar`);

    // Expand autogenerated references
    const expandedReferences = await expandAutogeneratedReferences(
      siteDir,
      references,
    );
    console.log(`Expanded to ${expandedReferences.length} total references`);

    // Check if files exist
    const missingFiles = await checkFilesExist(siteDir, expandedReferences);

    // Generate report
    const report = generateMissingFilesReport(missingFiles);
    console.log('\n' + report);

    // Exit with error code if files are missing
    if (missingFiles.length > 0) {
      process.exit(1);
    }
  } catch (error) {
    console.error('Error validating sidebar references:', error);
    process.exit(1);
  }
}

/**
 * Main function
 */
async function main(): Promise<void> {
  // Get site directory from command line arguments
  const args = process.argv.slice(2);

  if (args.length < 1) {
    console.error('Usage: validate-sidebar-references <site-directory>');
    process.exit(1);
  }

  const siteDir = path.resolve(args[0]);
  const sidebarPath = path.join(siteDir, 'sidebars.ts');

  await validateSidebarReferences(siteDir, sidebarPath);
}

// Run the script
main().catch((error) => {
  console.error('Unhandled error:', error);
  process.exit(1);
});
