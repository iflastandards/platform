{
  "graph": {
    "nodes": {
      "standards-cli": {
        "name": "standards-cli",
        "type": "lib",
        "data": {
          "root": "packages/standards-cli",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "packages/standards-cli",
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "pnpm exec eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "metadata": {
                "scriptContent": "tsc -p tsconfig.json",
                "runCommand": "pnpm run build"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "buildInputs",
                "^buildInputs",
                "sharedGlobals"
              ],
              "outputs": [
                "{projectRoot}/build",
                "{projectRoot}/dist"
              ],
              "cache": true
            },
            "dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev"
              },
              "metadata": {
                "scriptContent": "ts-node src/index.ts",
                "runCommand": "pnpm run dev"
              },
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "executor": "nx:run-script",
              "options": {
                "script": "test"
              },
              "metadata": {
                "scriptContent": "echo \"No tests implemented yet for standards-cli\" && exit 0",
                "runCommand": "pnpm run test"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "testInputs",
                "^testInputs",
                {
                  "runtime": "node -v"
                }
              ],
              "outputs": [
                "{projectRoot}/coverage",
                "{projectRoot}/test-results"
              ],
              "cache": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "standards-cli",
          "projectType": "library",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "build",
                "dev",
                "test"
              ]
            },
            "description": "",
            "js": {
              "packageName": "standards-cli",
              "packageExports": {
                ".": "./dist/index.js"
              },
              "packageMain": "index.js",
              "isInPackageManagerWorkspaces": true
            }
          },
          "implicitDependencies": []
        }
      },
      "muldicat": {
        "name": "muldicat",
        "type": "app",
        "data": {
          "root": "standards/muldicat",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "standards/muldicat",
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "pnpm exec eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus build standards/muldicat"
              },
              "configurations": {
                "production": {
                  "env": {
                    "DOCS_ENV": "production"
                  }
                },
                "preview": {
                  "env": {
                    "DOCS_ENV": "preview"
                  }
                }
              },
              "inputs": [
                "production",
                "^production",
                "docusaurus"
              ],
              "outputs": [
                "{projectRoot}/build",
                "{projectRoot}/.docusaurus"
              ],
              "cache": true,
              "parallelism": true,
              "dependsOn": [
                "^build"
              ]
            },
            "start": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus start standards/muldicat --port 3005"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "serve": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus serve standards/muldicat --port 3005"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "start:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site muldicat && docusaurus start standards/muldicat --port 3005"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site muldicat && docusaurus serve standards/muldicat --port 3005"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus clear standards/muldicat"
              },
              "configurations": {},
              "parallelism": true
            },
            "e2e": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test e2e/standards-smoke.spec.ts e2e/vocabulary-functionality.spec.ts",
                "cacheableOperations": [
                  "e2e"
                ]
              },
              "inputs": [
                "default",
                "{workspaceRoot}/e2e/standards-smoke.spec.ts",
                "{workspaceRoot}/e2e/vocabulary-functionality.spec.ts",
                "{workspaceRoot}/playwright.config.ts"
              ],
              "outputs": [
                "{workspaceRoot}/test-results",
                "{workspaceRoot}/playwright-report"
              ],
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "build"
              ]
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "tsc --noEmit",
                "cwd": "standards/muldicat"
              },
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ],
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "muldicat",
          "sourceRoot": "standards/muldicat",
          "projectType": "application",
          "tags": [
            "docusaurus",
            "site",
            "standard",
            "muldicat"
          ],
          "implicitDependencies": [
            "@ifla/theme"
          ]
        }
      },
      "newtest": {
        "name": "newtest",
        "type": "app",
        "data": {
          "root": "standards/newtest",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "standards/newtest",
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "pnpm exec eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus build standards/newtest"
              },
              "inputs": [
                "production",
                "^production",
                "docusaurus"
              ],
              "outputs": [
                "{projectRoot}/build",
                "{projectRoot}/.docusaurus"
              ],
              "cache": true,
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ]
            },
            "start": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus start standards/newtest --port 3008"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "serve": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus serve standards/newtest --port 3008"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "start:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site newtest && docusaurus start standards/newtest --port 3008"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site newtest && docusaurus serve standards/newtest --port 3008"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus clear standards/newtest"
              },
              "configurations": {},
              "parallelism": true
            },
            "e2e": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test e2e/standards-smoke.spec.ts e2e/vocabulary-functionality.spec.ts",
                "cacheableOperations": [
                  "e2e"
                ]
              },
              "inputs": [
                "default",
                "{workspaceRoot}/e2e/standards-smoke.spec.ts",
                "{workspaceRoot}/e2e/vocabulary-functionality.spec.ts",
                "{workspaceRoot}/playwright.config.ts"
              ],
              "outputs": [
                "{workspaceRoot}/test-results",
                "{workspaceRoot}/playwright-report"
              ],
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "build"
              ]
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "tsc --noEmit",
                "cwd": "standards/newtest"
              },
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ],
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "newtest",
          "sourceRoot": "standards/newtest",
          "projectType": "application",
          "tags": [
            "docusaurus",
            "site",
            "standard",
            "newtest"
          ],
          "implicitDependencies": [
            "@ifla/theme"
          ]
        }
      },
      "unimarc": {
        "name": "unimarc",
        "type": "app",
        "data": {
          "root": "standards/unimarc",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "standards/unimarc",
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "pnpm exec eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus build standards/unimarc"
              },
              "inputs": [
                "production",
                "^production",
                "docusaurus"
              ],
              "outputs": [
                "{projectRoot}/build",
                "{projectRoot}/.docusaurus"
              ],
              "cache": true,
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ]
            },
            "start": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus start standards/unimarc --port 3006"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "serve": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus serve standards/unimarc --port 3006"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "start:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site unimarc && docusaurus start standards/unimarc --port 3006"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site unimarc && docusaurus serve standards/unimarc --port 3006"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus clear standards/unimarc"
              },
              "configurations": {},
              "parallelism": true
            },
            "e2e": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test e2e/standards-smoke.spec.ts e2e/vocabulary-functionality.spec.ts",
                "cacheableOperations": [
                  "e2e"
                ]
              },
              "inputs": [
                "default",
                "{workspaceRoot}/e2e/standards-smoke.spec.ts",
                "{workspaceRoot}/e2e/vocabulary-functionality.spec.ts",
                "{workspaceRoot}/playwright.config.ts"
              ],
              "outputs": [
                "{workspaceRoot}/test-results",
                "{workspaceRoot}/playwright-report"
              ],
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "build"
              ]
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "tsc --noEmit",
                "cwd": "standards/unimarc"
              },
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ],
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "unimarc",
          "sourceRoot": "standards/unimarc",
          "projectType": "application",
          "tags": [
            "docusaurus",
            "site",
            "standard",
            "unimarc"
          ],
          "implicitDependencies": [
            "@ifla/theme"
          ]
        }
      },
      "sheet-sync": {
        "name": "sheet-sync",
        "type": "lib",
        "data": {
          "root": "tools/sheet-sync",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "tools/sheet-sync",
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "pnpm exec eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "executor": "@nx/vite:test",
              "outputs": [
                "{workspaceRoot}/coverage/tools/sheet-sync"
              ],
              "options": {
                "config": "tools/sheet-sync/vite.config.ts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "testInputs",
                "^testInputs",
                {
                  "runtime": "node -v"
                }
              ],
              "cache": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ],
              "options": {
                "cwd": "tools/sheet-sync",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "pnpm exec tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ]
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "continuous": true,
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm exec nx watch --projects sheet-sync --includeDependentProjects -- pnpm exec nx build-deps sheet-sync"
              },
              "configurations": {},
              "parallelism": true
            },
            "dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev"
              },
              "metadata": {
                "scriptContent": "ts-node src/index.ts",
                "runCommand": "pnpm run dev"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:tsc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/tools/sheet-sync",
                "tsConfig": "tools/sheet-sync/tsconfig.lib.json",
                "packageJson": "tools/sheet-sync/package.json",
                "main": "tools/sheet-sync/src/index.ts",
                "assets": [
                  "tools/sheet-sync/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "dev"
              ]
            },
            "description": "CLI tool for syncing CSV files with Google Sheets",
            "js": {
              "packageName": "@ifla/sheet-sync",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": true
            }
          },
          "name": "sheet-sync",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "tools/sheet-sync/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "isbdm": {
        "name": "isbdm",
        "type": "app",
        "data": {
          "root": "standards/ISBDM",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "standards/ISBDM",
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "pnpm exec eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus build standards/ISBDM"
              },
              "inputs": [
                "production",
                "^production",
                "docusaurus"
              ],
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "outputs": [
                "{projectRoot}/build",
                "{projectRoot}/dist"
              ],
              "cache": true
            },
            "start": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus start standards/ISBDM --port 3001"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "serve": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus serve standards/ISBDM --port 3001"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "start:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site isbdm && docusaurus start standards/ISBDM --port 3001"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site isbdm && docusaurus serve standards/ISBDM --port 3001"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus clear standards/ISBDM"
              },
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "executor": "@nx/vite:test",
              "options": {
                "config": "vite.config.ts",
                "testPathPattern": [
                  "standards/ISBDM/src/**/*.{test,spec}.{js,ts,jsx,tsx}"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "testInputs",
                "^testInputs",
                {
                  "runtime": "node -v"
                }
              ],
              "outputs": [
                "{projectRoot}/coverage",
                "{projectRoot}/test-results"
              ],
              "cache": true
            },
            "test:unit": {
              "executor": "@nx/vite:test",
              "options": {
                "config": "vite.config.ts",
                "exclude": [
                  "**/scripts/**",
                  "**/deployment/**"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "outputs": [
                "{projectRoot}/coverage",
                "{projectRoot}/test-results"
              ],
              "inputs": [
                "testInputs",
                "sharedGlobals"
              ]
            },
            "test:integration": {
              "executor": "@nx/vite:test",
              "options": {
                "config": "vite.config.ts",
                "include": [
                  "**/scripts/**",
                  "**/deployment/**"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "outputs": [
                "{projectRoot}/coverage",
                "{projectRoot}/test-results"
              ],
              "inputs": [
                "testInputs",
                "sharedGlobals"
              ]
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "tsc --noEmit",
                "cwd": "standards/ISBDM"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "cache": true,
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ]
            },
            "e2e": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test e2e/standards-smoke.spec.ts e2e/vocabulary-functionality.spec.ts",
                "cacheableOperations": [
                  "e2e"
                ]
              },
              "inputs": [
                "default",
                "{workspaceRoot}/e2e/standards-smoke.spec.ts",
                "{workspaceRoot}/e2e/vocabulary-functionality.spec.ts",
                "{workspaceRoot}/playwright.config.ts"
              ],
              "outputs": [
                "{workspaceRoot}/test-results",
                "{workspaceRoot}/playwright-report"
              ],
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "build"
              ]
            }
          },
          "name": "isbdm",
          "sourceRoot": "standards/ISBDM",
          "projectType": "application",
          "tags": [
            "docusaurus",
            "site",
            "standard",
            "isbdm"
          ],
          "implicitDependencies": [
            "@ifla/theme"
          ]
        }
      },
      "@ifla/theme": {
        "name": "@ifla/theme",
        "type": "lib",
        "data": {
          "root": "packages/theme",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "packages/theme",
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "pnpm exec eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build:tsc": {
              "executor": "nx:run-commands",
              "options": {
                "command": "npx tsc --project tsconfig.declarations.json",
                "cwd": "packages/theme"
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "commands": [
                  "pnpm exec tsup",
                  "nx run @ifla/theme:build:tsc"
                ],
                "cwd": "packages/theme",
                "parallel": false
              },
              "outputs": [
                "{projectRoot}/dist"
              ],
              "inputs": [
                "production",
                "{projectRoot}/src/**/*",
                "{projectRoot}/tsup.config.ts",
                "{projectRoot}/tsconfig.declarations.json",
                "{projectRoot}/package.json"
              ],
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "cache": true
            },
            "test": {
              "executor": "@nx/vite:test",
              "options": {
                "config": "vitest.config.nx.ts",
                "testPathPattern": [
                  "packages/theme/src/tests",
                  "packages/theme/src/components/**/__tests__"
                ],
                "passWithNoTests": true
              },
              "cache": true,
              "inputs": [
                "testInputs",
                "^testInputs"
              ],
              "outputs": [
                "{projectRoot}/coverage",
                "{projectRoot}/test-results"
              ],
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ]
            },
            "test:unit": {
              "executor": "@nx/vite:test",
              "options": {
                "config": "vitest.config.nx.ts",
                "exclude": [
                  "**/scripts/**",
                  "**/deployment/**"
                ],
                "passWithNoTests": true
              },
              "cache": true,
              "inputs": [
                "testInputs",
                "sharedGlobals"
              ],
              "outputs": [
                "{projectRoot}/coverage",
                "{projectRoot}/test-results"
              ],
              "configurations": {},
              "parallelism": true
            },
            "test:integration": {
              "executor": "@nx/vite:test",
              "options": {
                "config": "vite.config.ts",
                "include": [
                  "**/scripts/**",
                  "**/deployment/**"
                ]
              },
              "cache": true,
              "inputs": [
                "testInputs",
                "sharedGlobals"
              ],
              "outputs": [
                "{projectRoot}/coverage",
                "{projectRoot}/test-results"
              ],
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "tsc --noEmit",
                "cwd": "packages/theme"
              },
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ],
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@ifla/theme",
          "projectType": "library",
          "tags": [
            "npm:private",
            "library",
            "theme"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@ifla/theme",
              "packageExports": {
                ".": {
                  "types": "./dist/index.d.ts",
                  "import": "./dist/index.mjs",
                  "require": "./dist/index.js"
                },
                "./styles.css": "./dist/index.css",
                "./styles": "./dist/index.css",
                "./components/SiteLink": {
                  "types": "./dist/components/SiteLink.d.ts",
                  "import": "./dist/components/SiteLink.mjs",
                  "require": "./dist/components/SiteLink.js"
                },
                "./components/ElementReference": {
                  "types": "./dist/components/ElementReference.d.ts",
                  "import": "./dist/components/ElementReference.mjs",
                  "require": "./dist/components/ElementReference.js"
                },
                "./components/SiteManagementLink": {
                  "types": "./dist/components/SiteManagementLink.d.ts",
                  "import": "./dist/components/SiteManagementLink.mjs",
                  "require": "./dist/components/SiteManagementLink.js"
                },
                "./hooks/usePrevious": {
                  "types": "./dist/hooks/usePrevious.d.ts",
                  "import": "./dist/hooks/usePrevious.mjs",
                  "require": "./dist/hooks/usePrevious.js"
                },
                "./utils": {
                  "types": "./dist/utils/index.d.ts",
                  "import": "./dist/utils/index.mjs",
                  "require": "./dist/utils/index.js"
                },
                "./config": {
                  "types": "./dist/config/index.d.ts",
                  "import": "./dist/config/index.mjs",
                  "require": "./dist/config/index.js"
                },
                "./config/siteConfig": {
                  "types": "./dist/config/siteConfig.d.ts",
                  "import": "./dist/config/siteConfig.mjs",
                  "require": "./dist/config/siteConfig.js"
                },
                "./theme/NavbarItem/ComponentTypes": {
                  "types": "./dist/theme/NavbarItem/ComponentTypes.d.ts",
                  "import": "./dist/theme/NavbarItem/ComponentTypes.mjs",
                  "require": "./dist/theme/NavbarItem/ComponentTypes.js"
                },
                "./theme/NavbarItem/AuthDropdownNavbarItem": {
                  "types": "./dist/theme/NavbarItem/AuthDropdownNavbarItem.d.ts",
                  "import": "./dist/theme/NavbarItem/AuthDropdownNavbarItem.mjs",
                  "require": "./dist/theme/NavbarItem/AuthDropdownNavbarItem.js"
                }
              },
              "packageMain": "dist/index.js",
              "isInPackageManagerWorkspaces": true
            }
          },
          "sourceRoot": "packages/theme/src",
          "implicitDependencies": []
        }
      },
      "frbr": {
        "name": "frbr",
        "type": "app",
        "data": {
          "root": "standards/FRBR",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "standards/FRBR",
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "pnpm exec eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus build standards/FRBR"
              },
              "inputs": [
                "production",
                "^production",
                "docusaurus"
              ],
              "outputs": [
                "{projectRoot}/build",
                "{projectRoot}/.docusaurus"
              ],
              "cache": true,
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ]
            },
            "start": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus start standards/FRBR --port 3003"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "serve": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus serve standards/FRBR --port 3003"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "start:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site frbr && docusaurus start standards/FRBR --port 3003"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site frbr && docusaurus serve standards/FRBR --port 3003"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus clear standards/FRBR"
              },
              "configurations": {},
              "parallelism": true
            },
            "e2e": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test e2e/standards-smoke.spec.ts e2e/vocabulary-functionality.spec.ts",
                "cacheableOperations": [
                  "e2e"
                ]
              },
              "inputs": [
                "default",
                "{workspaceRoot}/e2e/standards-smoke.spec.ts",
                "{workspaceRoot}/e2e/vocabulary-functionality.spec.ts",
                "{workspaceRoot}/playwright.config.ts"
              ],
              "outputs": [
                "{workspaceRoot}/test-results",
                "{workspaceRoot}/playwright-report"
              ],
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "build"
              ]
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "tsc --noEmit",
                "cwd": "standards/FRBR"
              },
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ],
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "frbr",
          "sourceRoot": "standards/FRBR",
          "projectType": "application",
          "tags": [
            "docusaurus",
            "site",
            "standard",
            "frbr"
          ],
          "implicitDependencies": [
            "@ifla/theme"
          ]
        }
      },
      "isbd": {
        "name": "isbd",
        "type": "app",
        "data": {
          "root": "standards/isbd",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "standards/isbd",
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "pnpm exec eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus build standards/isbd"
              },
              "inputs": [
                "production",
                "^production",
                "docusaurus"
              ],
              "outputs": [
                "{projectRoot}/build",
                "{projectRoot}/.docusaurus"
              ],
              "cache": true,
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ]
            },
            "start": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus start standards/isbd --port 3004"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "serve": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus serve standards/isbd --port 3004"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "start:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site isbd && docusaurus start standards/isbd --port 3004"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site isbd && docusaurus serve standards/isbd --port 3004"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus clear standards/isbd"
              },
              "configurations": {},
              "parallelism": true
            },
            "e2e": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test e2e/standards-smoke.spec.ts e2e/vocabulary-functionality.spec.ts",
                "cacheableOperations": [
                  "e2e"
                ]
              },
              "inputs": [
                "default",
                "{workspaceRoot}/e2e/standards-smoke.spec.ts",
                "{workspaceRoot}/e2e/vocabulary-functionality.spec.ts",
                "{workspaceRoot}/playwright.config.ts"
              ],
              "outputs": [
                "{workspaceRoot}/test-results",
                "{workspaceRoot}/playwright-report"
              ],
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "build"
              ]
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "tsc --noEmit",
                "cwd": "standards/isbd"
              },
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ],
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "isbd",
          "sourceRoot": "standards/isbd",
          "projectType": "application",
          "tags": [
            "docusaurus",
            "site",
            "standard",
            "isbd"
          ],
          "implicitDependencies": [
            "@ifla/theme"
          ]
        }
      },
      "lrm": {
        "name": "lrm",
        "type": "app",
        "data": {
          "root": "standards/LRM",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "standards/LRM",
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "pnpm exec eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus build standards/LRM"
              },
              "inputs": [
                "production",
                "^production",
                "docusaurus"
              ],
              "outputs": [
                "{projectRoot}/build",
                "{projectRoot}/.docusaurus"
              ],
              "cache": true,
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ]
            },
            "start": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus start standards/LRM --port 3002"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "serve": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus serve standards/LRM --port 3002"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "start:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site lrm && docusaurus start standards/LRM --port 3002"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site lrm && docusaurus serve standards/LRM --port 3002"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus clear standards/LRM"
              },
              "configurations": {},
              "parallelism": true
            },
            "e2e": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test e2e/standards-smoke.spec.ts e2e/vocabulary-functionality.spec.ts",
                "cacheableOperations": [
                  "e2e"
                ]
              },
              "inputs": [
                "default",
                "{workspaceRoot}/e2e/standards-smoke.spec.ts",
                "{workspaceRoot}/e2e/vocabulary-functionality.spec.ts",
                "{workspaceRoot}/playwright.config.ts"
              ],
              "outputs": [
                "{workspaceRoot}/test-results",
                "{workspaceRoot}/playwright-report"
              ],
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "build"
              ]
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "tsc --noEmit",
                "cwd": "standards/LRM"
              },
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ],
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "lrm",
          "sourceRoot": "standards/LRM",
          "projectType": "application",
          "tags": [
            "docusaurus",
            "site",
            "standard",
            "lrm"
          ],
          "implicitDependencies": [
            "@ifla/theme"
          ]
        }
      },
      "admin": {
        "name": "admin",
        "type": "app",
        "data": {
          "root": "apps/admin",
          "targets": {
            "lint": {
              "executor": "@nx/eslint:lint",
              "outputs": [
                "{options.outputFile}"
              ],
              "options": {
                "lintFilePatterns": [
                  "apps/admin/src/**/*.{ts,tsx,js,jsx}",
                  "apps/admin/*.{ts,tsx,js,jsx}"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "^default"
              ],
              "cache": true
            },
            "test": {
              "executor": "nx:run-commands",
              "options": {
                "command": "vitest run",
                "cwd": "apps/admin"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "testInputs",
                "^testInputs",
                {
                  "runtime": "node -v"
                }
              ],
              "outputs": [
                "{projectRoot}/coverage",
                "{projectRoot}/test-results"
              ],
              "cache": true
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "tsc --noEmit",
                "cwd": "apps/admin"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "cache": true,
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ]
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "continuous": true,
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm exec nx watch --projects admin --includeDependentProjects -- pnpm exec nx build-deps admin"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/next:build",
              "outputs": [
                "{options.outputPath}"
              ],
              "defaultConfiguration": "production",
              "options": {
                "outputPath": "dist/apps/admin"
              },
              "configurations": {
                "development": {
                  "outputPath": "apps/admin"
                },
                "production": {}
              },
              "dependsOn": [
                {
                  "target": "build",
                  "projects": [
                    "@ifla/theme"
                  ]
                }
              ],
              "parallelism": true,
              "inputs": [
                "buildInputs",
                "^buildInputs",
                "sharedGlobals"
              ],
              "cache": true
            },
            "dev": {
              "executor": "@nx/next:server",
              "options": {
                "buildTarget": "admin:build:development",
                "dev": true,
                "port": 3007
              },
              "configurations": {},
              "parallelism": true,
              "continuous": true
            },
            "start": {
              "executor": "@nx/next:server",
              "options": {
                "buildTarget": "admin:build:production",
                "dev": false,
                "port": 3007
              },
              "configurations": {},
              "parallelism": true,
              "continuous": true,
              "cache": false
            },
            "serve-static": {
              "continuous": true,
              "options": {
                "cwd": "apps/admin",
                "command": "next start"
              },
              "dependsOn": [
                "build"
              ],
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "serve": {
              "executor": "@nx/next:server",
              "defaultConfiguration": "development",
              "options": {
                "buildTarget": "admin:build",
                "dev": true,
                "port": 3007
              },
              "configurations": {
                "development": {
                  "buildTarget": "admin:build:development",
                  "dev": true,
                  "port": 3007
                },
                "production": {
                  "buildTarget": "admin:build:production",
                  "dev": false,
                  "port": 3007
                }
              },
              "parallelism": true,
              "continuous": true,
              "cache": false
            },
            "test:unit": {
              "executor": "nx:run-commands",
              "options": {
                "command": "vitest run src/test/components/",
                "cwd": "apps/admin"
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "outputs": [
                "{projectRoot}/coverage",
                "{projectRoot}/test-results"
              ],
              "inputs": [
                "testInputs",
                "sharedGlobals"
              ]
            },
            "test:integration": {
              "executor": "nx:run-commands",
              "options": {
                "command": "vitest run src/test/integration/",
                "cwd": "apps/admin"
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "outputs": [
                "{projectRoot}/coverage",
                "{projectRoot}/test-results"
              ],
              "inputs": [
                "testInputs",
                "sharedGlobals"
              ]
            },
            "test:watch": {
              "executor": "nx:run-commands",
              "options": {
                "command": "vitest",
                "cwd": "apps/admin"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:coverage": {
              "executor": "nx:run-commands",
              "options": {
                "command": "vitest run --coverage",
                "cwd": "apps/admin"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:server-dependent": {
              "executor": "nx:run-commands",
              "options": {
                "command": "vitest run --config=vitest.config.server-dependent.ts",
                "cwd": "apps/admin"
              },
              "configurations": {},
              "parallelism": true
            },
            "e2e": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test --project=admin",
                "cwd": ".",
                "cacheableOperations": [
                  "e2e"
                ]
              },
              "inputs": [
                "default",
                "{workspaceRoot}/e2e/admin/**/*.spec.ts",
                "{workspaceRoot}/e2e/admin/**/*.e2e.test.ts",
                "{workspaceRoot}/playwright.config.ts"
              ],
              "outputs": [
                "{workspaceRoot}/test-results",
                "{workspaceRoot}/playwright-report"
              ],
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "build"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "description": "Authentication and API services for IFLA Standards platform",
            "js": {
              "packageName": "@ifla/admin",
              "isInPackageManagerWorkspaces": true
            }
          },
          "name": "admin",
          "projectType": "application",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "apps/admin",
          "implicitDependencies": []
        }
      },
      "portal": {
        "name": "portal",
        "type": "app",
        "data": {
          "root": "portal",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "portal",
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "pnpm exec eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus build portal"
              },
              "inputs": [
                "production",
                "^production",
                "docusaurus"
              ],
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "outputs": [
                "{projectRoot}/build",
                "{projectRoot}/dist"
              ],
              "cache": true
            },
            "start": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus start portal"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "start:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site portal && docusaurus start portal"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus serve portal"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "serve:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/utils/port-manager.js site portal && docusaurus serve portal"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docusaurus clear portal"
              },
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "tsc --noEmit",
                "cwd": "portal"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "cache": true,
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ]
            },
            "e2e": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test e2e/portal-smoke.spec.ts",
                "cacheableOperations": [
                  "e2e"
                ]
              },
              "inputs": [
                "default",
                "{workspaceRoot}/e2e/portal-smoke.spec.ts",
                "{workspaceRoot}/playwright.config.ts"
              ],
              "outputs": [
                "{workspaceRoot}/test-results",
                "{workspaceRoot}/playwright-report"
              ],
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "build"
              ]
            },
            "build-all": {
              "executor": "@nx/workspace:run-commands",
              "options": {
                "command": "nx run-many --target=build --all"
              },
              "configurations": {},
              "parallelism": true
            },
            "start-robust": {
              "executor": "@nx/workspace:run-commands",
              "options": {
                "command": "concurrently \"nx run portal:start:robust\" \"nx run isbd:start:robust\" \"nx run isbdm:start:robust\" \"nx run lrm:start:robust\" \"nx run frbr:start:robust\" \"nx run muldicat:start:robust\" \"nx run unimarc:start:robust\""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "portal",
          "sourceRoot": "portal",
          "projectType": "application",
          "tags": [
            "docusaurus",
            "site",
            "portal"
          ],
          "implicitDependencies": [
            "@ifla/theme"
          ]
        }
      },
      "platform": {
        "name": "platform",
        "type": "app",
        "data": {
          "root": ".",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "// GROUP 2: COMPREHENSIVE TESTS",
                "// GROUP 5: CI TESTS",
                "analyze:bundles",
                "analyze:bundles:sizes",
                "analyze:bundles:source",
                "build-env",
                "build:admin",
                "build:affected",
                "build:affected:legacy",
                "build:all",
                "build:all:legacy",
                "build:all:nx",
                "build:all:safe",
                "build:all:sequential",
                "build:clean",
                "build:frbr",
                "build:isbd",
                "build:isbdm",
                "build:lrm",
                "build:muldicat",
                "build:newtest",
                "build:portal",
                "build:theme",
                "build:unimarc",
                "check:language-tags",
                "check:language-tags:ai",
                "check:language-tags:ai:md",
                "check:language-tags:ai:test",
                "check:language-tags:help",
                "check:language-tags:md",
                "check:languages",
                "check:languages:help",
                "ci:build-all",
                "ci:test",
                "ci:test:essential",
                "clear",
                "clear:all",
                "clear:packages",
                "clear:sites",
                "clear:theme",
                "clear:webpack",
                "compare:vocabulary",
                "compare:vocabulary:help",
                "compare:vocabulary:md",
                "compare:vocabulary:validate",
                "dctap:generate",
                "demo:admin",
                "demo:admin:simple",
                "demo:hooks",
                "deploy",
                "deploy:build-all",
                "deploy:status",
                "detect:language-mismatches",
                "detect:language-mismatches-local",
                "detect:language-mismatches-skos",
                "dev:admin",
                "dev:admin:debug",
                "docs:build",
                "docs:release",
                "format:mdx",
                "fresh",
                "generate-next-routes-list",
                "health",
                "lint:affected",
                "lint:all",
                "lint:eslint",
                "lint:file",
                "lint:fix",
                "lint:mdx",
                "lint:quiet",
                "lint:quiet:fix",
                "lint:test-rules",
                "lint:tests",
                "next-list",
                "nx:affected",
                "nx:cache:clear",
                "nx:cache:stats",
                "nx:cloud:connect",
                "nx:daemon",
                "nx:daemon:start",
                "nx:daemon:stop",
                "nx:daemon:health",
                "nx:daemon:ensure",
                "nx:graph",
                "nx:migrate",
                "nx:monitor",
                "nx:monitor:cache",
                "nx:monitor:links",
                "nx:monitor:test",
                "nx:optimize",
                "nx:performance",
                "nx:repair",
                "output:move",
                "prepare",
                "ports:kill",
                "ports:kill:site",
                "ports:kill:verbose",
                "profile-copy",
                "rdf:folder-to-csv",
                "rdf:to-csv",
                "scaffold",
                "serve",
                "serve:admin",
                "serve:all",
                "serve:frbr",
                "serve:isbd",
                "serve:isbdm",
                "serve:lrm",
                "serve:muldicat",
                "serve:newtest",
                "serve:portal",
                "serve:robust",
                "serve:robust:nx",
                "serve:robust:site",
                "serve:unimarc",
                "setup",
                "sheet:create",
                "sheets:export",
                "sheets:import",
                "sheets:ingest",
                "start",
                "start:admin",
                "start:all",
                "start:frbr",
                "start:isbd",
                "start:isbdm",
                "start:lrm",
                "start:muldicat",
                "start:newtest",
                "start:portal",
                "start:robust",
                "start:robust:nx",
                "start:robust:site",
                "start:unimarc",
                "stop:admin",
                "stop:all",
                "stop:frbr",
                "stop:isbd",
                "stop:isbdm",
                "stop:lrm",
                "stop:muldicat",
                "stop:newtest",
                "stop:portal",
                "stop:unimarc",
                "swizzle",
                "test:nx",
                "test:vitest",
                "test:no-daemon",
                "test:admin",
                "test:admin:coverage",
                "test:admin:e2e",
                "test:admin:integration",
                "test:admin:roles",
                "test:admin:unit",
                "test:admin:watch",
                "test:affected",
                "test:all",
                "test:builds",
                "test:builds:all",
                "test:builds:config",
                "test:builds:critical",
                "test:builds:portal",
                "test:builds:production",
                "test:ci",
                "test:ci:env",
                "test:ci:env:only",
                "test:ci:config",
                "test:ci:connectivity",
                "test:comprehensive",
                "test:validate-placement",
                "test:comprehensive:builds",
                "test:comprehensive:e2e",
                "test:comprehensive:unit",
                "test:coverage",
                "test:e2e",
                "test:e2e:affected",
                "test:e2e:all",
                "test:e2e:isbdm",
                "test:e2e:lrm",
                "test:e2e:portal",
                "test:e2e:sharded",
                "test:e2e:ui",
                "test:explain-strategy",
                "test:full",
                "test:mark-run",
                "test:performance",
                "test:portal:e2e",
                "test:portal:optimized",
                "test:post-build",
                "test:post-build:local",
                "test:post-build:preview",
                "test:post-build:production",
                "test:pre-commit",
                "test:pre-commit:strict",
                "test:pre-push",
                "test:pre-push:fast",
                "test:pre-push:flexible",
                "test:pre-push:nx",
                "test:pre-push:nx:smart",
                "test:pre-push:optimized",
                "test:pre-push:reminder",
                "test:pre-push:smart",
                "test:pre-push:with-e2e",
                "test:regression",
                "test:regression:affected",
                "test:regression:fast",
                "test:regression:nx:fast",
                "test:regression:optimized",
                "test:ui",
                "test:visual",
                "test:visual-regression",
                "test:visual:update",
                "test:watch",
                "typecheck:all",
                "validate:builds:nx",
                "validate:builds:production:nx",
                "validate:built-site",
                "validate:env-urls",
                "validate:isbdm-links",
                "validate:navigation",
                "validate:navigation:show",
                "validate:site-links",
                "vocab:release",
                "vocabulary:create",
                "vocabulary:create-action",
                "write-heading-ids",
                "write-translations"
              ]
            },
            "description": "",
            "js": {
              "packageName": "platform",
              "packageMain": "index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "targets": {
            "test": {
              "executor": "@nx/vite:test",
              "options": {
                "config": "./vite.config.ts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "testInputs",
                "^testInputs",
                {
                  "runtime": "node -v"
                }
              ],
              "outputs": [
                "{projectRoot}/coverage",
                "{projectRoot}/test-results"
              ],
              "cache": true
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "tsc --noEmit"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "cache": true,
              "inputs": [
                "default",
                "{projectRoot}/tsconfig.json",
                "{workspaceRoot}/tsconfig.json"
              ]
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "continuous": true,
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm exec nx watch --projects platform --includeDependentProjects -- pnpm exec nx build-deps platform"
              },
              "configurations": {},
              "parallelism": true
            },
            "// GROUP 2: COMPREHENSIVE TESTS": {
              "executor": "nx:run-script",
              "options": {
                "script": "// GROUP 2: COMPREHENSIVE TESTS"
              },
              "metadata": {
                "scriptContent": "Full validation suites",
                "runCommand": "pnpm run // GROUP 2: COMPREHENSIVE TESTS"
              },
              "configurations": {},
              "parallelism": true
            },
            "// GROUP 5: CI TESTS": {
              "executor": "nx:run-script",
              "options": {
                "script": "// GROUP 5: CI TESTS"
              },
              "metadata": {
                "scriptContent": "Environment/infrastructure focus",
                "runCommand": "pnpm run // GROUP 5: CI TESTS"
              },
              "configurations": {},
              "parallelism": true
            },
            "analyze:bundles": {
              "executor": "nx:run-script",
              "options": {
                "script": "analyze:bundles"
              },
              "metadata": {
                "scriptContent": "node scripts/analyze-bundle-sizes.js",
                "runCommand": "pnpm run analyze:bundles"
              },
              "configurations": {},
              "parallelism": true
            },
            "analyze:bundles:sizes": {
              "executor": "nx:run-script",
              "options": {
                "script": "analyze:bundles:sizes"
              },
              "metadata": {
                "scriptContent": "node scripts/analyze-bundle-sizes.js bundles",
                "runCommand": "pnpm run analyze:bundles:sizes"
              },
              "configurations": {},
              "parallelism": true
            },
            "analyze:bundles:source": {
              "executor": "nx:run-script",
              "options": {
                "script": "analyze:bundles:source"
              },
              "metadata": {
                "scriptContent": "node scripts/analyze-bundle-sizes.js source",
                "runCommand": "pnpm run analyze:bundles:source"
              },
              "configurations": {},
              "parallelism": true
            },
            "build-env": {
              "executor": "nx:run-script",
              "options": {
                "script": "build-env"
              },
              "metadata": {
                "scriptContent": "node scripts/build-with-env.js",
                "runCommand": "pnpm run build-env"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:admin": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:admin"
              },
              "metadata": {
                "scriptContent": "nx build admin",
                "runCommand": "pnpm run build:admin"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:affected": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:affected"
              },
              "metadata": {
                "scriptContent": "nx affected --target=build --parallel=3",
                "runCommand": "pnpm run build:affected"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:affected:legacy": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:affected:legacy"
              },
              "metadata": {
                "scriptContent": "nx run platform:build-affected",
                "runCommand": "pnpm run build:affected:legacy"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:all"
              },
              "metadata": {
                "scriptContent": "nx run-many --target=build --all --parallel=3",
                "runCommand": "pnpm run build:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:all:legacy": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:all:legacy"
              },
              "metadata": {
                "scriptContent": "pnpm run build:theme && concurrently \"pnpm run build:portal\" \"pnpm run build:isbdm\" \"pnpm run build:lrm\" \"pnpm run build:frbr\" \"pnpm run build:isbd\" \"pnpm run build:muldicat\" \"pnpm run build:unimarc\"",
                "runCommand": "pnpm run build:all:legacy"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:all:nx": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:all:nx"
              },
              "metadata": {
                "scriptContent": "nx run platform:build-all",
                "runCommand": "pnpm run build:all:nx"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:all:safe": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:all:safe"
              },
              "metadata": {
                "scriptContent": "pnpm clear:all && pnpm build:all",
                "runCommand": "pnpm run build:all:safe"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:all:sequential": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:all:sequential"
              },
              "metadata": {
                "scriptContent": "nx run-many --target=build --all --parallel=1",
                "runCommand": "pnpm run build:all:sequential"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:clean": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:clean"
              },
              "metadata": {
                "scriptContent": "nx reset && pnpm build:all",
                "runCommand": "pnpm run build:clean"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:frbr": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:frbr"
              },
              "metadata": {
                "scriptContent": "nx build frbr",
                "runCommand": "pnpm run build:frbr"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:isbd": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:isbd"
              },
              "metadata": {
                "scriptContent": "nx build isbd",
                "runCommand": "pnpm run build:isbd"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:isbdm": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:isbdm"
              },
              "metadata": {
                "scriptContent": "nx build isbdm",
                "runCommand": "pnpm run build:isbdm"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:lrm": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:lrm"
              },
              "metadata": {
                "scriptContent": "nx build lrm",
                "runCommand": "pnpm run build:lrm"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:muldicat": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:muldicat"
              },
              "metadata": {
                "scriptContent": "nx build muldicat",
                "runCommand": "pnpm run build:muldicat"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:newtest": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:newtest"
              },
              "metadata": {
                "scriptContent": "nx build newtest",
                "runCommand": "pnpm run build:newtest"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:portal": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:portal"
              },
              "metadata": {
                "scriptContent": "nx build portal",
                "runCommand": "pnpm run build:portal"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:theme": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:theme"
              },
              "metadata": {
                "scriptContent": "nx build @ifla/theme",
                "runCommand": "pnpm run build:theme"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:unimarc": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:unimarc"
              },
              "metadata": {
                "scriptContent": "nx build unimarc",
                "runCommand": "pnpm run build:unimarc"
              },
              "configurations": {},
              "parallelism": true
            },
            "check:language-tags": {
              "executor": "nx:run-script",
              "options": {
                "script": "check:language-tags"
              },
              "metadata": {
                "scriptContent": "node scripts/check-mediatype-languages.mjs",
                "runCommand": "pnpm run check:language-tags"
              },
              "configurations": {},
              "parallelism": true
            },
            "check:language-tags:ai": {
              "executor": "nx:run-script",
              "options": {
                "script": "check:language-tags:ai"
              },
              "metadata": {
                "scriptContent": "node scripts/check-mediatype-languages.mjs --ai",
                "runCommand": "pnpm run check:language-tags:ai"
              },
              "configurations": {},
              "parallelism": true
            },
            "check:language-tags:ai:md": {
              "executor": "nx:run-script",
              "options": {
                "script": "check:language-tags:ai:md"
              },
              "metadata": {
                "scriptContent": "node scripts/check-mediatype-languages.mjs --ai --markdown",
                "runCommand": "pnpm run check:language-tags:ai:md"
              },
              "configurations": {},
              "parallelism": true
            },
            "check:language-tags:ai:test": {
              "executor": "nx:run-script",
              "options": {
                "script": "check:language-tags:ai:test"
              },
              "metadata": {
                "scriptContent": "node scripts/check-mediatype-languages.mjs --ai --test",
                "runCommand": "pnpm run check:language-tags:ai:test"
              },
              "configurations": {},
              "parallelism": true
            },
            "check:language-tags:help": {
              "executor": "nx:run-script",
              "options": {
                "script": "check:language-tags:help"
              },
              "metadata": {
                "scriptContent": "node scripts/check-mediatype-languages.mjs --help",
                "runCommand": "pnpm run check:language-tags:help"
              },
              "configurations": {},
              "parallelism": true
            },
            "check:language-tags:md": {
              "executor": "nx:run-script",
              "options": {
                "script": "check:language-tags:md"
              },
              "metadata": {
                "scriptContent": "node scripts/check-mediatype-languages.mjs --markdown",
                "runCommand": "pnpm run check:language-tags:md"
              },
              "configurations": {},
              "parallelism": true
            },
            "check:languages": {
              "executor": "nx:run-script",
              "options": {
                "script": "check:languages"
              },
              "metadata": {
                "scriptContent": "tsx scripts/check-missing-languages.ts",
                "runCommand": "pnpm run check:languages"
              },
              "configurations": {},
              "parallelism": true
            },
            "check:languages:help": {
              "executor": "nx:run-script",
              "options": {
                "script": "check:languages:help"
              },
              "metadata": {
                "scriptContent": "tsx scripts/check-missing-languages.ts --help",
                "runCommand": "pnpm run check:languages:help"
              },
              "configurations": {},
              "parallelism": true
            },
            "ci:build-all": {
              "executor": "nx:run-script",
              "options": {
                "script": "ci:build-all"
              },
              "metadata": {
                "scriptContent": "pnpm docs:build && pnpm vocab:release --dry-run",
                "runCommand": "pnpm run ci:build-all"
              },
              "configurations": {},
              "parallelism": true
            },
            "ci:test": {
              "executor": "nx:run-script",
              "options": {
                "script": "ci:test"
              },
              "metadata": {
                "scriptContent": "pnpm lint && pnpm run test",
                "runCommand": "pnpm run ci:test"
              },
              "configurations": {},
              "parallelism": true
            },
            "ci:test:essential": {
              "executor": "nx:run-script",
              "options": {
                "script": "ci:test:essential"
              },
              "metadata": {
                "scriptContent": "pnpm typecheck && pnpm lint --quiet && pnpm test --run && node scripts/test-site-builds.js --site all --env local --skip-build",
                "runCommand": "pnpm run ci:test:essential"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear": {
              "executor": "nx:run-script",
              "options": {
                "script": "clear"
              },
              "metadata": {
                "scriptContent": "docusaurus clear",
                "runCommand": "pnpm run clear"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "clear:all"
              },
              "metadata": {
                "scriptContent": "rimraf ./standards/*/.docusaurus ./standards/*/build ./portal/.docusaurus ./portal/build ./packages/theme/.docusaurus ./packages/theme/dist ./packages/standards-cli/dist ./node_modules/.cache/webpack",
                "runCommand": "pnpm run clear:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear:packages": {
              "executor": "nx:run-script",
              "options": {
                "script": "clear:packages"
              },
              "metadata": {
                "scriptContent": "pnpm run clear:theme",
                "runCommand": "pnpm run clear:packages"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear:sites": {
              "executor": "nx:run-script",
              "options": {
                "script": "clear:sites"
              },
              "metadata": {
                "scriptContent": "rimraf ./standards/*/.docusaurus ./standards/*/build ./portal/.docusaurus ./portal/build",
                "runCommand": "pnpm run clear:sites"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear:theme": {
              "executor": "nx:run-script",
              "options": {
                "script": "clear:theme"
              },
              "metadata": {
                "scriptContent": "rimraf ./packages/theme/.docusaurus ./packages/theme/dist",
                "runCommand": "pnpm run clear:theme"
              },
              "configurations": {},
              "parallelism": true
            },
            "clear:webpack": {
              "executor": "nx:run-script",
              "options": {
                "script": "clear:webpack"
              },
              "metadata": {
                "scriptContent": "rimraf node_modules/.cache/webpack",
                "runCommand": "pnpm run clear:webpack"
              },
              "configurations": {},
              "parallelism": true
            },
            "compare:vocabulary": {
              "executor": "nx:run-script",
              "options": {
                "script": "compare:vocabulary"
              },
              "metadata": {
                "scriptContent": "node scripts/vocabulary-comparison.mjs",
                "runCommand": "pnpm run compare:vocabulary"
              },
              "configurations": {},
              "parallelism": true
            },
            "compare:vocabulary:help": {
              "executor": "nx:run-script",
              "options": {
                "script": "compare:vocabulary:help"
              },
              "metadata": {
                "scriptContent": "node scripts/vocabulary-comparison.mjs --help",
                "runCommand": "pnpm run compare:vocabulary:help"
              },
              "configurations": {},
              "parallelism": true
            },
            "compare:vocabulary:md": {
              "executor": "nx:run-script",
              "options": {
                "script": "compare:vocabulary:md"
              },
              "metadata": {
                "scriptContent": "node scripts/vocabulary-comparison.mjs --markdown",
                "runCommand": "pnpm run compare:vocabulary:md"
              },
              "configurations": {},
              "parallelism": true
            },
            "compare:vocabulary:validate": {
              "executor": "nx:run-script",
              "options": {
                "script": "compare:vocabulary:validate"
              },
              "metadata": {
                "scriptContent": "node scripts/vocabulary-comparison.mjs --skip-rdf-check --markdown",
                "runCommand": "pnpm run compare:vocabulary:validate"
              },
              "configurations": {},
              "parallelism": true
            },
            "dctap:generate": {
              "executor": "nx:run-script",
              "options": {
                "script": "dctap:generate"
              },
              "metadata": {
                "scriptContent": "node scripts/dctap-generate.js --profile ./profiles/current.csv --out ./spreadsheets/template.xlsx",
                "runCommand": "pnpm run dctap:generate"
              },
              "configurations": {},
              "parallelism": true
            },
            "demo:admin": {
              "executor": "nx:run-script",
              "options": {
                "script": "demo:admin"
              },
              "metadata": {
                "scriptContent": "./scripts/demo-admin-integration.sh",
                "runCommand": "pnpm run demo:admin"
              },
              "configurations": {},
              "parallelism": true
            },
            "demo:admin:simple": {
              "executor": "nx:run-script",
              "options": {
                "script": "demo:admin:simple"
              },
              "metadata": {
                "scriptContent": "node scripts/demo-admin-simple.js",
                "runCommand": "pnpm run demo:admin:simple"
              },
              "configurations": {},
              "parallelism": true
            },
            "demo:hooks": {
              "executor": "nx:run-script",
              "options": {
                "script": "demo:hooks"
              },
              "metadata": {
                "scriptContent": "./scripts/demo-hooks.sh",
                "runCommand": "pnpm run demo:hooks"
              },
              "configurations": {},
              "parallelism": true
            },
            "deploy": {
              "executor": "nx:run-script",
              "options": {
                "script": "deploy"
              },
              "metadata": {
                "scriptContent": "gh workflow run deploy-all.yml",
                "runCommand": "pnpm run deploy"
              },
              "configurations": {},
              "parallelism": true
            },
            "deploy:build-all": {
              "executor": "nx:run-script",
              "options": {
                "script": "deploy:build-all"
              },
              "metadata": {
                "scriptContent": "pnpm run build:all",
                "runCommand": "pnpm run deploy:build-all"
              },
              "configurations": {},
              "parallelism": true
            },
            "deploy:status": {
              "executor": "nx:run-script",
              "options": {
                "script": "deploy:status"
              },
              "metadata": {
                "scriptContent": "gh run list --workflow=deploy-all.yml --limit=5",
                "runCommand": "pnpm run deploy:status"
              },
              "configurations": {},
              "parallelism": true
            },
            "detect:language-mismatches": {
              "executor": "nx:run-script",
              "options": {
                "script": "detect:language-mismatches"
              },
              "metadata": {
                "scriptContent": "node scripts/detect-language-mismatches.mjs",
                "runCommand": "pnpm run detect:language-mismatches"
              },
              "configurations": {},
              "parallelism": true
            },
            "detect:language-mismatches-local": {
              "executor": "nx:run-script",
              "options": {
                "script": "detect:language-mismatches-local"
              },
              "metadata": {
                "scriptContent": "node scripts/detect-language-mismatches-local.mjs",
                "runCommand": "pnpm run detect:language-mismatches-local"
              },
              "configurations": {},
              "parallelism": true
            },
            "detect:language-mismatches-skos": {
              "executor": "nx:run-script",
              "options": {
                "script": "detect:language-mismatches-skos"
              },
              "metadata": {
                "scriptContent": "node scripts/detect-language-mismatches-skos.mjs",
                "runCommand": "pnpm run detect:language-mismatches-skos"
              },
              "configurations": {},
              "parallelism": true
            },
            "dev:admin": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev:admin"
              },
              "metadata": {
                "scriptContent": "nx dev admin --turbopack",
                "runCommand": "pnpm run dev:admin"
              },
              "configurations": {},
              "parallelism": true
            },
            "dev:admin:debug": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev:admin:debug"
              },
              "metadata": {
                "scriptContent": "NODE_OPTIONS='--inspect' nx dev admin",
                "runCommand": "pnpm run dev:admin:debug"
              },
              "configurations": {},
              "parallelism": true
            },
            "docs:build": {
              "executor": "nx:run-script",
              "options": {
                "script": "docs:build"
              },
              "metadata": {
                "scriptContent": "docusaurus build",
                "runCommand": "pnpm run docs:build"
              },
              "configurations": {},
              "parallelism": true
            },
            "docs:release": {
              "executor": "nx:run-script",
              "options": {
                "script": "docs:release"
              },
              "metadata": {
                "scriptContent": "node scripts/release-docs.js",
                "runCommand": "pnpm run docs:release"
              },
              "configurations": {},
              "parallelism": true
            },
            "format:mdx": {
              "executor": "nx:run-script",
              "options": {
                "script": "format:mdx"
              },
              "metadata": {
                "scriptContent": "remark --rc-path .remarkrc.js \"docs/**/*.{md,mdx}\" --output",
                "runCommand": "pnpm run format:mdx"
              },
              "configurations": {},
              "parallelism": true
            },
            "fresh": {
              "executor": "nx:run-script",
              "options": {
                "script": "fresh"
              },
              "metadata": {
                "scriptContent": "pnpm nx:cache:clear && rm -rf node_modules pnpm-lock.yaml && pnpm setup",
                "runCommand": "pnpm run fresh"
              },
              "configurations": {},
              "parallelism": true
            },
            "generate-next-routes-list": {
              "executor": "nx:run-script",
              "options": {
                "script": "generate-next-routes-list"
              },
              "metadata": {
                "scriptContent": "cd ~/code/ifla/standards-dev/apps/admin/src && generate-next-routes-list -o routes.ts",
                "runCommand": "pnpm run generate-next-routes-list"
              },
              "configurations": {},
              "parallelism": true
            },
            "health": {
              "executor": "nx:run-script",
              "options": {
                "script": "health"
              },
              "metadata": {
                "scriptContent": "node scripts/health-check.js",
                "runCommand": "pnpm run health"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint:affected": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:affected"
              },
              "metadata": {
                "scriptContent": "nx affected --target=lint --parallel=3",
                "runCommand": "pnpm run lint:affected"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:all"
              },
              "metadata": {
                "scriptContent": "nx run-many --target=lint --all --parallel=3",
                "runCommand": "pnpm run lint:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint:eslint": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:eslint"
              },
              "metadata": {
                "scriptContent": "eslint .",
                "runCommand": "pnpm run lint:eslint"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint:file": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:file"
              },
              "metadata": {
                "scriptContent": "eslint",
                "runCommand": "pnpm run lint:file"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint:fix": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:fix"
              },
              "metadata": {
                "scriptContent": "eslint . --fix",
                "runCommand": "pnpm run lint:fix"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint:mdx": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:mdx"
              },
              "metadata": {
                "scriptContent": "remark . --ext .mdx,.md",
                "runCommand": "pnpm run lint:mdx"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint:quiet": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:quiet"
              },
              "metadata": {
                "scriptContent": "eslint . --quiet",
                "runCommand": "pnpm run lint:quiet"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint:quiet:fix": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:quiet:fix"
              },
              "metadata": {
                "scriptContent": "eslint . --quiet --fix",
                "runCommand": "pnpm run lint:quiet:fix"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint:test-rules": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:test-rules"
              },
              "metadata": {
                "scriptContent": "node scripts/test-linting-rules.js",
                "runCommand": "pnpm run lint:test-rules"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint:tests": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:tests"
              },
              "metadata": {
                "scriptContent": "eslint '**/*.test.{js,jsx,ts,tsx}' '**/*.spec.{js,jsx,ts,tsx}' '**/tests/**/*.{js,jsx,ts,tsx}' '**/e2e/**/*.{js,jsx,ts,tsx}'",
                "runCommand": "pnpm run lint:tests"
              },
              "configurations": {},
              "parallelism": true
            },
            "next-list": {
              "executor": "nx:run-script",
              "options": {
                "script": "next-list"
              },
              "metadata": {
                "scriptContent": "cd ~/code/ifla/standards-dev/apps/admin && next-list",
                "runCommand": "pnpm run next-list"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:affected": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:affected"
              },
              "metadata": {
                "scriptContent": "nx affected --target=build --dry-run",
                "runCommand": "pnpm run nx:affected"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:cache:clear": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:cache:clear"
              },
              "metadata": {
                "scriptContent": "nx reset",
                "runCommand": "pnpm run nx:cache:clear"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:cache:stats": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:cache:stats"
              },
              "metadata": {
                "scriptContent": "nx cache statistics",
                "runCommand": "pnpm run nx:cache:stats"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:cloud:connect": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:cloud:connect"
              },
              "metadata": {
                "scriptContent": "nx connect",
                "runCommand": "pnpm run nx:cloud:connect"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:daemon": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:daemon"
              },
              "metadata": {
                "scriptContent": "nx daemon",
                "runCommand": "pnpm run nx:daemon"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:daemon:start": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:daemon:start"
              },
              "metadata": {
                "scriptContent": "nx daemon --start",
                "runCommand": "pnpm run nx:daemon:start"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:daemon:stop": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:daemon:stop"
              },
              "metadata": {
                "scriptContent": "nx daemon --stop",
                "runCommand": "pnpm run nx:daemon:stop"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:daemon:health": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:daemon:health"
              },
              "metadata": {
                "scriptContent": "node scripts/nx-daemon-health.js",
                "runCommand": "pnpm run nx:daemon:health"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:daemon:ensure": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:daemon:ensure"
              },
              "metadata": {
                "scriptContent": "node scripts/ensure-nx-daemon.js",
                "runCommand": "pnpm run nx:daemon:ensure"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:graph": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:graph"
              },
              "metadata": {
                "scriptContent": "nx graph",
                "runCommand": "pnpm run nx:graph"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:migrate": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:migrate"
              },
              "metadata": {
                "scriptContent": "nx migrate latest",
                "runCommand": "pnpm run nx:migrate"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:monitor": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:monitor"
              },
              "metadata": {
                "scriptContent": "node scripts/nx-cloud-monitor.js",
                "runCommand": "pnpm run nx:monitor"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:monitor:cache": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:monitor:cache"
              },
              "metadata": {
                "scriptContent": "node scripts/nx-cloud-monitor.js cache",
                "runCommand": "pnpm run nx:monitor:cache"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:monitor:links": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:monitor:links"
              },
              "metadata": {
                "scriptContent": "node scripts/nx-cloud-monitor.js links",
                "runCommand": "pnpm run nx:monitor:links"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:monitor:test": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:monitor:test"
              },
              "metadata": {
                "scriptContent": "node scripts/nx-cloud-monitor.js test",
                "runCommand": "pnpm run nx:monitor:test"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:optimize": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:optimize"
              },
              "metadata": {
                "scriptContent": "node scripts/optimize-nx-performance.js",
                "runCommand": "pnpm run nx:optimize"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:performance": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:performance"
              },
              "metadata": {
                "scriptContent": "node scripts/nx-performance-check.js",
                "runCommand": "pnpm run nx:performance"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx:repair": {
              "executor": "nx:run-script",
              "options": {
                "script": "nx:repair"
              },
              "metadata": {
                "scriptContent": "nx repair",
                "runCommand": "pnpm run nx:repair"
              },
              "configurations": {},
              "parallelism": true
            },
            "output:move": {
              "executor": "nx:run-script",
              "options": {
                "script": "output:move"
              },
              "metadata": {
                "scriptContent": "node scripts/move-output-files.js",
                "runCommand": "pnpm run output:move"
              },
              "configurations": {},
              "parallelism": true
            },
            "prepare": {
              "executor": "nx:run-script",
              "options": {
                "script": "prepare"
              },
              "metadata": {
                "scriptContent": "husky",
                "runCommand": "pnpm run prepare"
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ]
            },
            "ports:kill": {
              "executor": "nx:run-script",
              "options": {
                "script": "ports:kill"
              },
              "metadata": {
                "scriptContent": "node scripts/utils/port-manager.js all",
                "runCommand": "pnpm run ports:kill"
              },
              "configurations": {},
              "parallelism": true
            },
            "ports:kill:site": {
              "executor": "nx:run-script",
              "options": {
                "script": "ports:kill:site"
              },
              "metadata": {
                "scriptContent": "node scripts/utils/port-manager.js site",
                "runCommand": "pnpm run ports:kill:site"
              },
              "configurations": {},
              "parallelism": true
            },
            "ports:kill:verbose": {
              "executor": "nx:run-script",
              "options": {
                "script": "ports:kill:verbose"
              },
              "metadata": {
                "scriptContent": "node scripts/utils/port-manager.js all --verbose",
                "runCommand": "pnpm run ports:kill:verbose"
              },
              "configurations": {},
              "parallelism": true
            },
            "profile-copy": {
              "executor": "nx:run-script",
              "options": {
                "script": "profile-copy"
              },
              "metadata": {
                "scriptContent": "tsx tools/profile-copy.ts",
                "runCommand": "pnpm run profile-copy"
              },
              "configurations": {},
              "parallelism": true
            },
            "rdf:folder-to-csv": {
              "executor": "nx:run-script",
              "options": {
                "script": "rdf:folder-to-csv"
              },
              "metadata": {
                "scriptContent": "tsx scripts/rdf-folder-to-csv.ts",
                "runCommand": "pnpm run rdf:folder-to-csv"
              },
              "configurations": {},
              "parallelism": true
            },
            "rdf:to-csv": {
              "executor": "nx:run-script",
              "options": {
                "script": "rdf:to-csv"
              },
              "metadata": {
                "scriptContent": "tsx scripts/rdf-to-csv.ts",
                "runCommand": "pnpm run rdf:to-csv"
              },
              "configurations": {},
              "parallelism": true
            },
            "scaffold": {
              "executor": "nx:run-script",
              "options": {
                "script": "scaffold"
              },
              "metadata": {
                "scriptContent": "tsx scripts/create-ifla-standard.ts",
                "runCommand": "pnpm run scaffold"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve"
              },
              "metadata": {
                "scriptContent": "pnpm stop:portal && docusaurus serve portal",
                "runCommand": "pnpm run serve"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "serve:admin": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:admin"
              },
              "metadata": {
                "scriptContent": "nx serve admin",
                "runCommand": "pnpm run serve:admin"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:all"
              },
              "metadata": {
                "scriptContent": "pnpm stop:all && concurrently \"docusaurus serve portal --port 3000\" \"docusaurus serve standards/ISBDM --port 3001\" \"docusaurus serve standards/LRM --port 3002\" \"docusaurus serve standards/FRBR --port 3003\" \"docusaurus serve standards/isbd --port 3004\" \"docusaurus serve standards/muldicat --port 3005\" \"docusaurus serve standards/unimarc --port 3006\" \"nx serve admin\"",
                "runCommand": "pnpm run serve:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:frbr": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:frbr"
              },
              "metadata": {
                "scriptContent": "pnpm stop:frbr && docusaurus serve standards/FRBR --port 3003",
                "runCommand": "pnpm run serve:frbr"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:isbd": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:isbd"
              },
              "metadata": {
                "scriptContent": "pnpm stop:isbd && docusaurus serve standards/isbd --port 3004",
                "runCommand": "pnpm run serve:isbd"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:isbdm": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:isbdm"
              },
              "metadata": {
                "scriptContent": "pnpm stop:isbdm && docusaurus serve standards/ISBDM --port 3001",
                "runCommand": "pnpm run serve:isbdm"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:lrm": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:lrm"
              },
              "metadata": {
                "scriptContent": "pnpm stop:lrm && docusaurus serve standards/LRM --port 3002",
                "runCommand": "pnpm run serve:lrm"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:muldicat": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:muldicat"
              },
              "metadata": {
                "scriptContent": "pnpm stop:muldicat && docusaurus serve standards/muldicat --port 3005",
                "runCommand": "pnpm run serve:muldicat"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:newtest": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:newtest"
              },
              "metadata": {
                "scriptContent": "pnpm stop:newtest && docusaurus serve standards/newtest --port 3008",
                "runCommand": "pnpm run serve:newtest"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:portal": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:portal"
              },
              "metadata": {
                "scriptContent": "pnpm stop:portal && docusaurus serve portal --port 3000",
                "runCommand": "pnpm run serve:portal"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:robust": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:robust"
              },
              "metadata": {
                "scriptContent": "node scripts/start-with-port-cleanup.js serve",
                "runCommand": "pnpm run serve:robust"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:robust:nx": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:robust:nx"
              },
              "metadata": {
                "scriptContent": "nx run platform:serve-all:robust",
                "runCommand": "pnpm run serve:robust:nx"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:robust:site": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:robust:site"
              },
              "metadata": {
                "scriptContent": "node scripts/start-with-port-cleanup.js serve",
                "runCommand": "pnpm run serve:robust:site"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve:unimarc": {
              "executor": "nx:run-script",
              "options": {
                "script": "serve:unimarc"
              },
              "metadata": {
                "scriptContent": "pnpm stop:unimarc && docusaurus serve standards/unimarc --port 3006",
                "runCommand": "pnpm run serve:unimarc"
              },
              "configurations": {},
              "parallelism": true
            },
            "setup": {
              "executor": "nx:run-script",
              "options": {
                "script": "setup"
              },
              "metadata": {
                "scriptContent": "pnpm install && pnpm nx:daemon:ensure && pnpm health",
                "runCommand": "pnpm run setup"
              },
              "configurations": {},
              "parallelism": true
            },
            "sheet:create": {
              "executor": "nx:run-script",
              "options": {
                "script": "sheet:create"
              },
              "metadata": {
                "scriptContent": "tsx scripts/create-sheet.ts",
                "runCommand": "pnpm run sheet:create"
              },
              "configurations": {},
              "parallelism": true
            },
            "sheets:export": {
              "executor": "nx:run-script",
              "options": {
                "script": "sheets:export"
              },
              "metadata": {
                "scriptContent": "ts-node scripts/sheets-export.ts",
                "runCommand": "pnpm run sheets:export"
              },
              "configurations": {},
              "parallelism": true
            },
            "sheets:import": {
              "executor": "nx:run-script",
              "options": {
                "script": "sheets:import"
              },
              "metadata": {
                "scriptContent": "ts-node scripts/sheets-import.ts",
                "runCommand": "pnpm run sheets:import"
              },
              "configurations": {},
              "parallelism": true
            },
            "sheets:ingest": {
              "executor": "nx:run-script",
              "options": {
                "script": "sheets:ingest"
              },
              "metadata": {
                "scriptContent": "node scripts/sheets-to-mdx.js --sheet 'https://docs.google.com/...'",
                "runCommand": "pnpm run sheets:ingest"
              },
              "configurations": {},
              "parallelism": true
            },
            "start": {
              "executor": "nx:run-script",
              "options": {
                "script": "start"
              },
              "metadata": {
                "scriptContent": "pnpm stop:portal && pnpm build:theme && DOCS_ENV=local docusaurus start",
                "runCommand": "pnpm run start"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "start:admin": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:admin"
              },
              "metadata": {
                "scriptContent": "nx start admin",
                "runCommand": "pnpm run start:admin"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:all"
              },
              "metadata": {
                "scriptContent": "pnpm stop:all && pnpm build:theme && concurrently \"DOCS_ENV=local docusaurus start portal --port 3000\" \"DOCS_ENV=local docusaurus start standards/ISBDM --port 3001\" \"DOCS_ENV=local docusaurus start standards/LRM --port 3002\" \"DOCS_ENV=local docusaurus start standards/FRBR --port 3003\" \"DOCS_ENV=local docusaurus start standards/isbd --port 3004\" \"DOCS_ENV=local docusaurus start standards/muldicat --port 3005\" \"DOCS_ENV=local docusaurus start standards/unimarc --port 3006\" \"nx dev admin\"",
                "runCommand": "pnpm run start:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:frbr": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:frbr"
              },
              "metadata": {
                "scriptContent": "pnpm stop:frbr && DOCS_ENV=local docusaurus start standards/FRBR --port 3003",
                "runCommand": "pnpm run start:frbr"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:isbd": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:isbd"
              },
              "metadata": {
                "scriptContent": "pnpm stop:isbd && DOCS_ENV=local docusaurus start standards/isbd --port 3004",
                "runCommand": "pnpm run start:isbd"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:isbdm": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:isbdm"
              },
              "metadata": {
                "scriptContent": "pnpm stop:isbdm && DOCS_ENV=local docusaurus start standards/ISBDM --port 3001",
                "runCommand": "pnpm run start:isbdm"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:lrm": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:lrm"
              },
              "metadata": {
                "scriptContent": "pnpm stop:lrm && DOCS_ENV=local docusaurus start standards/LRM --port 3002",
                "runCommand": "pnpm run start:lrm"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:muldicat": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:muldicat"
              },
              "metadata": {
                "scriptContent": "pnpm stop:muldicat && DOCS_ENV=local docusaurus start standards/muldicat --port 3005",
                "runCommand": "pnpm run start:muldicat"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:newtest": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:newtest"
              },
              "metadata": {
                "scriptContent": "pnpm stop:newtest && DOCS_ENV=local docusaurus start standards/newtest --port 3008",
                "runCommand": "pnpm run start:newtest"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:portal": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:portal"
              },
              "metadata": {
                "scriptContent": "pnpm stop:portal && DOCS_ENV=local docusaurus start portal --port 3000",
                "runCommand": "pnpm run start:portal"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:robust": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:robust"
              },
              "metadata": {
                "scriptContent": "node scripts/start-with-port-cleanup.js start",
                "runCommand": "pnpm run start:robust"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:robust:nx": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:robust:nx"
              },
              "metadata": {
                "scriptContent": "nx run platform:start-all:robust",
                "runCommand": "pnpm run start:robust:nx"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:robust:site": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:robust:site"
              },
              "metadata": {
                "scriptContent": "node scripts/start-with-port-cleanup.js start",
                "runCommand": "pnpm run start:robust:site"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:unimarc": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:unimarc"
              },
              "metadata": {
                "scriptContent": "pnpm stop:unimarc && DOCS_ENV=local docusaurus start standards/unimarc --port 3006",
                "runCommand": "pnpm run start:unimarc"
              },
              "configurations": {},
              "parallelism": true
            },
            "stop:admin": {
              "executor": "nx:run-script",
              "options": {
                "script": "stop:admin"
              },
              "metadata": {
                "scriptContent": "lsof -ti:3007 | xargs kill -9 2>/dev/null || true",
                "runCommand": "pnpm run stop:admin"
              },
              "configurations": {},
              "parallelism": true
            },
            "stop:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "stop:all"
              },
              "metadata": {
                "scriptContent": "lsof -ti:3000,3001,3002,3003,3004,3005,3006,3007,3008 | xargs kill -9 2>/dev/null || true && pkill -f 'docusaurus start' 2>/dev/null || true",
                "runCommand": "pnpm run stop:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "stop:frbr": {
              "executor": "nx:run-script",
              "options": {
                "script": "stop:frbr"
              },
              "metadata": {
                "scriptContent": "lsof -ti:3003 | xargs kill -9 2>/dev/null || true",
                "runCommand": "pnpm run stop:frbr"
              },
              "configurations": {},
              "parallelism": true
            },
            "stop:isbd": {
              "executor": "nx:run-script",
              "options": {
                "script": "stop:isbd"
              },
              "metadata": {
                "scriptContent": "lsof -ti:3004 | xargs kill -9 2>/dev/null || true",
                "runCommand": "pnpm run stop:isbd"
              },
              "configurations": {},
              "parallelism": true
            },
            "stop:isbdm": {
              "executor": "nx:run-script",
              "options": {
                "script": "stop:isbdm"
              },
              "metadata": {
                "scriptContent": "lsof -ti:3001 | xargs kill -9 2>/dev/null || true",
                "runCommand": "pnpm run stop:isbdm"
              },
              "configurations": {},
              "parallelism": true
            },
            "stop:lrm": {
              "executor": "nx:run-script",
              "options": {
                "script": "stop:lrm"
              },
              "metadata": {
                "scriptContent": "lsof -ti:3002 | xargs kill -9 2>/dev/null || true",
                "runCommand": "pnpm run stop:lrm"
              },
              "configurations": {},
              "parallelism": true
            },
            "stop:muldicat": {
              "executor": "nx:run-script",
              "options": {
                "script": "stop:muldicat"
              },
              "metadata": {
                "scriptContent": "lsof -ti:3005 | xargs kill -9 2>/dev/null || true",
                "runCommand": "pnpm run stop:muldicat"
              },
              "configurations": {},
              "parallelism": true
            },
            "stop:newtest": {
              "executor": "nx:run-script",
              "options": {
                "script": "stop:newtest"
              },
              "metadata": {
                "scriptContent": "lsof -ti:3008 | xargs kill -9 2>/dev/null || true",
                "runCommand": "pnpm run stop:newtest"
              },
              "configurations": {},
              "parallelism": true
            },
            "stop:portal": {
              "executor": "nx:run-script",
              "options": {
                "script": "stop:portal"
              },
              "metadata": {
                "scriptContent": "lsof -ti:3000 | xargs kill -9 2>/dev/null || true",
                "runCommand": "pnpm run stop:portal"
              },
              "configurations": {},
              "parallelism": true
            },
            "stop:unimarc": {
              "executor": "nx:run-script",
              "options": {
                "script": "stop:unimarc"
              },
              "metadata": {
                "scriptContent": "lsof -ti:3006 | xargs kill -9 2>/dev/null || true",
                "runCommand": "pnpm run stop:unimarc"
              },
              "configurations": {},
              "parallelism": true
            },
            "swizzle": {
              "executor": "nx:run-script",
              "options": {
                "script": "swizzle"
              },
              "metadata": {
                "scriptContent": "docusaurus swizzle",
                "runCommand": "pnpm run swizzle"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:nx": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:nx"
              },
              "metadata": {
                "scriptContent": "node scripts/nx-test.js",
                "runCommand": "pnpm run test:nx"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:vitest": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:vitest"
              },
              "metadata": {
                "scriptContent": "vitest run --config vitest.config.nx.ts",
                "runCommand": "pnpm run test:vitest"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:no-daemon": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:no-daemon"
              },
              "metadata": {
                "scriptContent": "nx affected --target=test --parallel=3",
                "runCommand": "pnpm run test:no-daemon"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:admin": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:admin"
              },
              "metadata": {
                "scriptContent": "nx test admin",
                "runCommand": "pnpm run test:admin"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:admin:coverage": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:admin:coverage"
              },
              "metadata": {
                "scriptContent": "nx run admin:test:coverage",
                "runCommand": "pnpm run test:admin:coverage"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:admin:e2e": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:admin:e2e"
              },
              "metadata": {
                "scriptContent": "nx run admin:e2e",
                "runCommand": "pnpm run test:admin:e2e"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:admin:integration": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:admin:integration"
              },
              "metadata": {
                "scriptContent": "nx run admin:test:integration",
                "runCommand": "pnpm run test:admin:integration"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:admin:roles": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:admin:roles"
              },
              "metadata": {
                "scriptContent": "node scripts/test-admin-roles.js",
                "runCommand": "pnpm run test:admin:roles"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:admin:unit": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:admin:unit"
              },
              "metadata": {
                "scriptContent": "nx run admin:test:unit",
                "runCommand": "pnpm run test:admin:unit"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:admin:watch": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:admin:watch"
              },
              "metadata": {
                "scriptContent": "nx run admin:test:watch",
                "runCommand": "pnpm run test:admin:watch"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:affected": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:affected"
              },
              "metadata": {
                "scriptContent": "nx affected --target=test --parallel=3",
                "runCommand": "pnpm run test:affected"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:all"
              },
              "metadata": {
                "scriptContent": "nx run-many --target=test --all --parallel=3",
                "runCommand": "pnpm run test:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:builds": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:builds"
              },
              "metadata": {
                "scriptContent": "node scripts/test-site-builds.js",
                "runCommand": "pnpm run test:builds"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:builds:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:builds:all"
              },
              "metadata": {
                "scriptContent": "node scripts/test-site-builds.js --site all",
                "runCommand": "pnpm run test:builds:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:builds:config": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:builds:config"
              },
              "metadata": {
                "scriptContent": "node scripts/test-site-builds.js --skip-build",
                "runCommand": "pnpm run test:builds:config"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:builds:critical": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:builds:critical"
              },
              "metadata": {
                "scriptContent": "node scripts/test-site-builds.js --site portal --env production && node scripts/test-site-builds.js --site ISBDM --env production",
                "runCommand": "pnpm run test:builds:critical"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:builds:portal": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:builds:portal"
              },
              "metadata": {
                "scriptContent": "node scripts/test-site-builds.js --site portal",
                "runCommand": "pnpm run test:builds:portal"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:builds:production": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:builds:production"
              },
              "metadata": {
                "scriptContent": "node scripts/test-site-builds.js --site all --env production",
                "runCommand": "pnpm run test:builds:production"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:ci": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:ci"
              },
              "metadata": {
                "scriptContent": "pnpm test:ci:env",
                "runCommand": "pnpm run test:ci"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:ci:env": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:ci:env"
              },
              "metadata": {
                "scriptContent": "node scripts/ci-env-tests.js",
                "runCommand": "pnpm run test:ci:env"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:ci:env:only": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:ci:env:only"
              },
              "metadata": {
                "scriptContent": "vitest run --config vitest.config.ci-env.ts",
                "runCommand": "pnpm run test:ci:env:only"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:ci:config": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:ci:config"
              },
              "metadata": {
                "scriptContent": "node scripts/test-site-builds.js --site all --env production --skip-build",
                "runCommand": "pnpm run test:ci:config"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:ci:connectivity": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:ci:connectivity"
              },
              "metadata": {
                "scriptContent": "pnpm vitest run --config vitest.config.ci.ts packages/theme/src/tests/deployment/external-services.test.ts",
                "runCommand": "pnpm run test:ci:connectivity"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:comprehensive": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:comprehensive"
              },
              "metadata": {
                "scriptContent": "nx run-many --targets=typecheck,lint,test,build --all --parallel=3 && nx run platform:e2e",
                "runCommand": "pnpm run test:comprehensive"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:validate-placement": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:validate-placement"
              },
              "metadata": {
                "scriptContent": "node scripts/validate-test-placement.js",
                "runCommand": "pnpm run test:validate-placement"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:comprehensive:builds": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:comprehensive:builds"
              },
              "metadata": {
                "scriptContent": "nx run-many --target=build --all --parallel=3 && node scripts/test-site-builds.js --site all --env production && pnpm test:post-build:local",
                "runCommand": "pnpm run test:comprehensive:builds"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:comprehensive:e2e": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:comprehensive:e2e"
              },
              "metadata": {
                "scriptContent": "nx run platform:e2e && nx run-many --target=e2e --all",
                "runCommand": "pnpm run test:comprehensive:e2e"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:comprehensive:unit": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:comprehensive:unit"
              },
              "metadata": {
                "scriptContent": "nx run-many --target=test --all --parallel=3",
                "runCommand": "pnpm run test:comprehensive:unit"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:coverage": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:coverage"
              },
              "metadata": {
                "scriptContent": "pnpm test --coverage",
                "runCommand": "pnpm run test:coverage"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e"
              },
              "metadata": {
                "scriptContent": "nx run platform:e2e",
                "runCommand": "pnpm run test:e2e"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:affected": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:affected"
              },
              "metadata": {
                "scriptContent": "nx affected --target=e2e",
                "runCommand": "pnpm run test:e2e:affected"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:all"
              },
              "metadata": {
                "scriptContent": "nx run-many --target=e2e --all",
                "runCommand": "pnpm run test:e2e:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:isbdm": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:isbdm"
              },
              "metadata": {
                "scriptContent": "nx run isbdm:e2e",
                "runCommand": "pnpm run test:e2e:isbdm"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:lrm": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:lrm"
              },
              "metadata": {
                "scriptContent": "nx run lrm:e2e",
                "runCommand": "pnpm run test:e2e:lrm"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:portal": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:portal"
              },
              "metadata": {
                "scriptContent": "nx run portal:e2e",
                "runCommand": "pnpm run test:e2e:portal"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:sharded": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:sharded"
              },
              "metadata": {
                "scriptContent": "SHARD_CURRENT=1 SHARD_TOTAL=4 npx nx playwright:e2e",
                "runCommand": "pnpm run test:e2e:sharded"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:ui": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:ui"
              },
              "metadata": {
                "scriptContent": "nx run platform:e2e:ui",
                "runCommand": "pnpm run test:e2e:ui"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:explain-strategy": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:explain-strategy"
              },
              "metadata": {
                "scriptContent": "node scripts/explain-testing-strategy.js",
                "runCommand": "pnpm run test:explain-strategy"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:full": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:full"
              },
              "metadata": {
                "scriptContent": "pnpm typecheck && pnpm lint --quiet && pnpm test && pnpm test:builds:config",
                "runCommand": "pnpm run test:full"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:mark-run": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:mark-run"
              },
              "metadata": {
                "scriptContent": "node scripts/mark-tests-run.js",
                "runCommand": "pnpm run test:mark-run"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:performance": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:performance"
              },
              "metadata": {
                "scriptContent": "npx nx playwright:e2e e2e/performance.spec.ts",
                "runCommand": "pnpm run test:performance"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:portal:e2e": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:portal:e2e"
              },
              "metadata": {
                "scriptContent": "./scripts/test-portal-builds.sh",
                "runCommand": "pnpm run test:portal:e2e"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:portal:optimized": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:portal:optimized"
              },
              "metadata": {
                "scriptContent": "./scripts/test-portal-builds-optimized.sh",
                "runCommand": "pnpm run test:portal:optimized"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:post-build": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:post-build"
              },
              "metadata": {
                "scriptContent": "DOCS_ENV=${DOCS_ENV:-local} nx playwright:e2e e2e/post-build-validation.spec.ts",
                "runCommand": "pnpm run test:post-build"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:post-build:local": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:post-build:local"
              },
              "metadata": {
                "scriptContent": "DOCS_ENV=local nx playwright:e2e e2e/post-build-validation.spec.ts",
                "runCommand": "pnpm run test:post-build:local"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:post-build:preview": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:post-build:preview"
              },
              "metadata": {
                "scriptContent": "DOCS_ENV=preview nx playwright:e2e e2e/post-build-validation.spec.ts",
                "runCommand": "pnpm run test:post-build:preview"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:post-build:production": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:post-build:production"
              },
              "metadata": {
                "scriptContent": "DOCS_ENV=production nx playwright:e2e e2e/post-build-validation.spec.ts",
                "runCommand": "pnpm run test:post-build:production"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:pre-commit": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:pre-commit"
              },
              "metadata": {
                "scriptContent": "node scripts/pre-commit-check.js",
                "runCommand": "pnpm run test:pre-commit"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:pre-commit:strict": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:pre-commit:strict"
              },
              "metadata": {
                "scriptContent": "nx affected --targets=typecheck,lint,test:unit --parallel=3 && node scripts/test-site-builds-affected.js --env local --skip-build",
                "runCommand": "pnpm run test:pre-commit:strict"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:pre-push": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:pre-push"
              },
              "metadata": {
                "scriptContent": "pnpm test:pre-commit && pnpm test:builds:critical",
                "runCommand": "pnpm run test:pre-push"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:pre-push:fast": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:pre-push:fast"
              },
              "metadata": {
                "scriptContent": "./scripts/nx-pre-push-fast.sh",
                "runCommand": "pnpm run test:pre-push:fast"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:pre-push:flexible": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:pre-push:flexible"
              },
              "metadata": {
                "scriptContent": "node scripts/pre-push-check.js",
                "runCommand": "pnpm run test:pre-push:flexible"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:pre-push:nx": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:pre-push:nx"
              },
              "metadata": {
                "scriptContent": "nx affected --target=lint && nx affected --target=typecheck && nx affected --target=test && nx affected --target=build",
                "runCommand": "pnpm run test:pre-push:nx"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:pre-push:nx:smart": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:pre-push:nx:smart"
              },
              "metadata": {
                "scriptContent": "./scripts/nx-pre-push.sh",
                "runCommand": "pnpm run test:pre-push:nx:smart"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:pre-push:optimized": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:pre-push:optimized"
              },
              "metadata": {
                "scriptContent": "./.husky/pre-push-optimized",
                "runCommand": "pnpm run test:pre-push:optimized"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:pre-push:reminder": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:pre-push:reminder"
              },
              "metadata": {
                "scriptContent": "./.husky/pre-push-reminder",
                "runCommand": "pnpm run test:pre-push:reminder"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:pre-push:smart": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:pre-push:smart"
              },
              "metadata": {
                "scriptContent": "./.husky/pre-push-smart",
                "runCommand": "pnpm run test:pre-push:smart"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:pre-push:with-e2e": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:pre-push:with-e2e"
              },
              "metadata": {
                "scriptContent": "node -e \"const fs=require('fs'); const cfg=JSON.parse(fs.readFileSync('.prepushrc.json')); cfg.runE2E=true; fs.writeFileSync('.prepushrc.json', JSON.stringify(cfg,null,2)); console.log('E2E enabled for this run');\" && node scripts/pre-push-check.js",
                "runCommand": "pnpm run test:pre-push:with-e2e"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:regression": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:regression"
              },
              "metadata": {
                "scriptContent": "nx run platform:regression:full",
                "runCommand": "pnpm run test:regression"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:regression:affected": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:regression:affected"
              },
              "metadata": {
                "scriptContent": "node scripts/test-site-builds-optimized.js --affected-only",
                "runCommand": "pnpm run test:regression:affected"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:regression:fast": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:regression:fast"
              },
              "metadata": {
                "scriptContent": "node scripts/test-site-builds-optimized.js --mode fast --skip-build",
                "runCommand": "pnpm run test:regression:fast"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:regression:nx:fast": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:regression:nx:fast"
              },
              "metadata": {
                "scriptContent": "nx run platform:regression:fast",
                "runCommand": "pnpm run test:regression:nx:fast"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:regression:optimized": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:regression:optimized"
              },
              "metadata": {
                "scriptContent": "node scripts/test-site-builds-optimized.js --mode smart",
                "runCommand": "pnpm run test:regression:optimized"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:ui": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:ui"
              },
              "metadata": {
                "scriptContent": "nx test --ui",
                "runCommand": "pnpm run test:ui"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:visual": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:visual"
              },
              "metadata": {
                "scriptContent": "npx nx playwright:e2e e2e/visual-regression-enhanced.spec.ts",
                "runCommand": "pnpm run test:visual"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:visual-regression": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:visual-regression"
              },
              "metadata": {
                "scriptContent": "nx playwright:e2e --config=playwright-snapshots.config.ts",
                "runCommand": "pnpm run test:visual-regression"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:visual:update": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:visual:update"
              },
              "metadata": {
                "scriptContent": "npx nx playwright:e2e e2e/visual-regression-enhanced.spec.ts --update-snapshots",
                "runCommand": "pnpm run test:visual:update"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:watch": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:watch"
              },
              "metadata": {
                "scriptContent": "nx test --watch",
                "runCommand": "pnpm run test:watch"
              },
              "configurations": {},
              "parallelism": true
            },
            "typecheck:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck:all"
              },
              "metadata": {
                "scriptContent": "nx run-many --target=typecheck --all --parallel=3",
                "runCommand": "pnpm run typecheck:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "validate:builds:nx": {
              "executor": "nx:run-script",
              "options": {
                "script": "validate:builds:nx"
              },
              "metadata": {
                "scriptContent": "nx run platform:validate:builds",
                "runCommand": "pnpm run validate:builds:nx"
              },
              "configurations": {},
              "parallelism": true
            },
            "validate:builds:production:nx": {
              "executor": "nx:run-script",
              "options": {
                "script": "validate:builds:production:nx"
              },
              "metadata": {
                "scriptContent": "nx run platform:validate:builds:production",
                "runCommand": "pnpm run validate:builds:production:nx"
              },
              "configurations": {},
              "parallelism": true
            },
            "validate:built-site": {
              "executor": "nx:run-script",
              "options": {
                "script": "validate:built-site"
              },
              "metadata": {
                "scriptContent": "node scripts/validate-built-site-links.js",
                "runCommand": "pnpm run validate:built-site"
              },
              "configurations": {},
              "parallelism": true
            },
            "validate:env-urls": {
              "executor": "nx:run-script",
              "options": {
                "script": "validate:env-urls"
              },
              "metadata": {
                "scriptContent": "node scripts/validate-environment-urls.js",
                "runCommand": "pnpm run validate:env-urls"
              },
              "configurations": {},
              "parallelism": true
            },
            "validate:isbdm-links": {
              "executor": "nx:run-script",
              "options": {
                "script": "validate:isbdm-links"
              },
              "metadata": {
                "scriptContent": "node scripts/validate-isbdm-links.js",
                "runCommand": "pnpm run validate:isbdm-links"
              },
              "configurations": {},
              "parallelism": true
            },
            "validate:navigation": {
              "executor": "nx:run-script",
              "options": {
                "script": "validate:navigation"
              },
              "metadata": {
                "scriptContent": "node scripts/validate-navigation-urls.js",
                "runCommand": "pnpm run validate:navigation"
              },
              "configurations": {},
              "parallelism": true
            },
            "validate:navigation:show": {
              "executor": "nx:run-script",
              "options": {
                "script": "validate:navigation:show"
              },
              "metadata": {
                "scriptContent": "node scripts/validate-navigation-urls.js show",
                "runCommand": "pnpm run validate:navigation:show"
              },
              "configurations": {},
              "parallelism": true
            },
            "validate:site-links": {
              "executor": "nx:run-script",
              "options": {
                "script": "validate:site-links"
              },
              "metadata": {
                "scriptContent": "node scripts/validate-site-links.js",
                "runCommand": "pnpm run validate:site-links"
              },
              "configurations": {},
              "parallelism": true
            },
            "vocab:release": {
              "executor": "nx:run-script",
              "options": {
                "script": "vocab:release"
              },
              "metadata": {
                "scriptContent": "node scripts/release-vocab.js",
                "runCommand": "pnpm run vocab:release"
              },
              "configurations": {},
              "parallelism": true
            },
            "vocabulary:create": {
              "executor": "nx:run-script",
              "options": {
                "script": "vocabulary:create"
              },
              "metadata": {
                "scriptContent": "tsx scripts/create-vocabulary-sheet.ts",
                "runCommand": "pnpm run vocabulary:create"
              },
              "configurations": {},
              "parallelism": true
            },
            "vocabulary:create-action": {
              "executor": "nx:run-script",
              "options": {
                "script": "vocabulary:create-action"
              },
              "metadata": {
                "scriptContent": "tsx scripts/create-vocabulary-sheet-action.ts",
                "runCommand": "pnpm run vocabulary:create-action"
              },
              "configurations": {},
              "parallelism": true
            },
            "write-heading-ids": {
              "executor": "nx:run-script",
              "options": {
                "script": "write-heading-ids"
              },
              "metadata": {
                "scriptContent": "docusaurus write-heading-ids",
                "runCommand": "pnpm run write-heading-ids"
              },
              "configurations": {},
              "parallelism": true
            },
            "write-translations": {
              "executor": "nx:run-script",
              "options": {
                "script": "write-translations"
              },
              "metadata": {
                "scriptContent": "docusaurus write-translations",
                "runCommand": "pnpm run write-translations"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "lint": {
              "executor": "@nx/eslint:lint",
              "options": {
                "lintFilePatterns": [
                  "**/*.{js,jsx,ts,tsx}",
                  "!node_modules/**/*",
                  "!dist/**/*",
                  "!build/**/*",
                  "!.nx/**/*",
                  "!**/.next/**/*",
                  "!playwright-report/**/*",
                  "!test-results/**/*",
                  "!.idea/**/*",
                  "!.vscode/**/*"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [],
              "cache": true
            },
            "e2e": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test",
                "cacheableOperations": [
                  "e2e"
                ]
              },
              "dependsOn": [
                "build-all"
              ],
              "inputs": [
                "default",
                "{projectRoot}/e2e/**/*",
                "{projectRoot}/playwright.config.ts"
              ],
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "outputs": [
                "{projectRoot}/test-results",
                "{projectRoot}/playwright-report",
                "{workspaceRoot}/test-results",
                "{workspaceRoot}/playwright-report"
              ]
            },
            "e2e:fail-fast": {
              "executor": "nx:run-commands",
              "options": {
                "command": "FAIL_FAST=true playwright test --max-failures=1"
              },
              "dependsOn": [
                "build-all"
              ],
              "inputs": [
                "default",
                "{projectRoot}/e2e/**/*",
                "{projectRoot}/playwright.config.ts"
              ],
              "configurations": {},
              "parallelism": true
            },
            "e2e:affected": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test --grep \"affected\"",
                "cwd": "."
              },
              "inputs": [
                "default",
                "{projectRoot}/e2e/**/*",
                "{projectRoot}/playwright.config.ts"
              ],
              "configurations": {},
              "parallelism": true
            },
            "e2e:ui": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test --ui"
              },
              "dependsOn": [
                "build-all"
              ],
              "configurations": {},
              "parallelism": true
            },
            "e2e:admin": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test --project=admin"
              },
              "dependsOn": [
                "admin:build"
              ],
              "inputs": [
                "default",
                "{projectRoot}/e2e/admin/**/*",
                "{projectRoot}/playwright.config.ts"
              ],
              "configurations": {},
              "parallelism": true
            },
            "e2e:admin:fail-fast": {
              "executor": "nx:run-commands",
              "options": {
                "command": "FAIL_FAST=true playwright test --project=admin --max-failures=1"
              },
              "dependsOn": [
                "admin:build"
              ],
              "inputs": [
                "default",
                "{projectRoot}/e2e/admin/**/*",
                "{projectRoot}/playwright.config.ts"
              ],
              "configurations": {},
              "parallelism": true
            },
            "e2e:site-validation": {
              "executor": "nx:run-commands",
              "options": {
                "command": "playwright test e2e/site-validation.spec.ts"
              },
              "dependsOn": [
                "build-all"
              ],
              "inputs": [
                "default",
                "{projectRoot}/e2e/site-validation.spec.ts",
                "{projectRoot}/playwright.config.ts",
                "{projectRoot}/packages/theme/src/config/siteConfigCore.ts"
              ],
              "configurations": {},
              "parallelism": true
            },
            "e2e:site-validation:preview": {
              "executor": "nx:run-commands",
              "options": {
                "command": "DOCS_ENV=preview playwright test e2e/site-validation.spec.ts"
              },
              "dependsOn": [
                "build-all"
              ],
              "configurations": {},
              "parallelism": true
            },
            "e2e:site-validation:production": {
              "executor": "nx:run-commands",
              "options": {
                "command": "DOCS_ENV=production playwright test e2e/site-validation.spec.ts"
              },
              "dependsOn": [
                "build-all"
              ],
              "configurations": {},
              "parallelism": true
            },
            "build-all": {
              "executor": "nx:run-commands",
              "options": {
                "commands": [
                  "nx run-many --target=build --all --parallel=1"
                ]
              },
              "outputs": [
                "{projectRoot}/portal/build",
                "{projectRoot}/standards/*/build"
              ],
              "configurations": {},
              "parallelism": true
            },
            "build-affected": {
              "executor": "nx:run-commands",
              "options": {
                "command": "nx affected --target=build --parallel=1"
              },
              "configurations": {},
              "parallelism": true
            },
            "start-all": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm start:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "start-all:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/start-with-port-cleanup.js start"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve-all": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm serve:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "serve-all:robust": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/start-with-port-cleanup.js serve"
              },
              "configurations": {},
              "parallelism": true
            },
            "validate:builds": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/test-site-builds.js --skip-build"
              },
              "dependsOn": [
                "build-all"
              ],
              "configurations": {},
              "parallelism": true
            },
            "validate:builds:production": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/test-site-builds.js --env production --skip-build"
              },
              "dependsOn": [
                "build-all"
              ],
              "configurations": {},
              "parallelism": true
            },
            "validate:build-warnings": {
              "executor": "nx:run-commands",
              "options": {
                "command": "node scripts/validate-build-warnings.js --validate-all"
              },
              "dependsOn": [
                "build-all"
              ],
              "configurations": {},
              "parallelism": true
            },
            "regression:full": {
              "executor": "nx:run-commands",
              "options": {
                "commands": [
                  "nx run platform:typecheck",
                  "nx run platform:lint",
                  "nx run platform:test",
                  "nx run platform:build-all",
                  "nx run platform:validate:builds",
                  "nx run platform:validate:build-warnings",
                  "nx run platform:e2e"
                ],
                "parallel": false
              },
              "configurations": {},
              "parallelism": true
            },
            "regression:fast": {
              "executor": "nx:run-commands",
              "options": {
                "commands": [
                  "nx affected --target=typecheck --parallel=3",
                  "nx affected --target=lint --parallel=3",
                  "nx affected --target=test --parallel=3",
                  "nx affected --target=build --parallel=3"
                ],
                "parallel": false
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "echo 'Workspace root - no build needed'"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "buildInputs",
                "^buildInputs",
                "sharedGlobals"
              ],
              "outputs": [
                "{projectRoot}/build",
                "{projectRoot}/dist"
              ],
              "cache": true
            }
          },
          "name": "platform",
          "tags": [
            "npm:public",
            "workspace-root"
          ],
          "sourceRoot": ".",
          "projectType": "application",
          "implicitDependencies": []
        }
      }
    },
    "dependencies": {
      "standards-cli": [],
      "muldicat": [
        {
          "source": "muldicat",
          "target": "@ifla/theme",
          "type": "implicit"
        },
        {
          "source": "muldicat",
          "target": "@ifla/theme",
          "type": "static"
        }
      ],
      "newtest": [
        {
          "source": "newtest",
          "target": "@ifla/theme",
          "type": "implicit"
        },
        {
          "source": "newtest",
          "target": "@ifla/theme",
          "type": "static"
        }
      ],
      "unimarc": [
        {
          "source": "unimarc",
          "target": "@ifla/theme",
          "type": "implicit"
        },
        {
          "source": "unimarc",
          "target": "@ifla/theme",
          "type": "static"
        }
      ],
      "sheet-sync": [],
      "isbdm": [
        {
          "source": "isbdm",
          "target": "@ifla/theme",
          "type": "implicit"
        },
        {
          "source": "isbdm",
          "target": "@ifla/theme",
          "type": "static"
        }
      ],
      "@ifla/theme": [],
      "frbr": [
        {
          "source": "frbr",
          "target": "@ifla/theme",
          "type": "implicit"
        },
        {
          "source": "frbr",
          "target": "@ifla/theme",
          "type": "static"
        }
      ],
      "isbd": [
        {
          "source": "isbd",
          "target": "@ifla/theme",
          "type": "implicit"
        },
        {
          "source": "isbd",
          "target": "@ifla/theme",
          "type": "static"
        }
      ],
      "lrm": [
        {
          "source": "lrm",
          "target": "@ifla/theme",
          "type": "implicit"
        },
        {
          "source": "lrm",
          "target": "@ifla/theme",
          "type": "static"
        }
      ],
      "admin": [
        {
          "source": "admin",
          "target": "@ifla/theme",
          "type": "static"
        }
      ],
      "portal": [
        {
          "source": "portal",
          "target": "@ifla/theme",
          "type": "implicit"
        },
        {
          "source": "portal",
          "target": "@ifla/theme",
          "type": "static"
        }
      ],
      "platform": [
        {
          "source": "platform",
          "target": "@ifla/theme",
          "type": "static"
        },
        {
          "source": "platform",
          "target": "admin",
          "type": "dynamic"
        }
      ]
    }
  }
}