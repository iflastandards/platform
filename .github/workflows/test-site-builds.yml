name: Test Site Builds

on:
  push:
    branches: [main, dev]
    paths:
      - 'packages/**'
      - 'standards/**'
      - 'portal/**'
      - 'scripts/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'tsconfig.json'
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      site:
        description: 'Site to test (specific site or "all")'
        required: false
        default: 'affected'
      environment:
        description: 'Environment to test'
        required: false
        default: 'production'
        type: choice
        options:
          - localhost
          - preview
          - production

jobs:
  test-nx:
    name: NX Tests & Builds
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for NX affected

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Setup NX Cloud
        uses: nrwl/nx-set-shas@v4

      - name: Run affected tests (unit, lint, typecheck)
        if: github.event.inputs.site != 'all'
        run: |
          echo "🔍 Running affected validation..."
          nx affected --target=typecheck --parallel=3
          nx affected --target=lint --parallel=3 --quiet
          nx affected --target=test --parallel=3

      - name: Run all tests (unit, lint, typecheck)
        if: github.event.inputs.site == 'all'
        run: |
          echo "🔍 Running all validation..."
          nx run-many --target=typecheck --all --parallel=3
          nx run-many --target=lint --all --parallel=3 --quiet
          nx run-many --target=test --all --parallel=3

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/

  test-configurations:
    name: Test Site Configurations
    runs-on: ubuntu-latest
    needs: test-nx
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build theme package
        run: nx build @ifla/theme

      - name: Test site configurations
        run: |
          SITE=${{ github.event.inputs.site || 'affected' }}
          ENV=${{ github.event.inputs.environment || (github.ref_name == 'main' && 'production' || github.ref_name == 'dev' && 'dev' || 'production') }}
          
          if [ "$SITE" = "affected" ]; then
            echo "Testing affected site configurations..."
            node scripts/test-site-builds-affected.js --env $ENV --skip-build
          else
            echo "Testing $SITE site configurations..."
            node scripts/test-site-builds.js --site $SITE --env $ENV --skip-build
          fi

  test-site-builds:
    name: Test Site Builds
    runs-on: ubuntu-latest
    needs: test-configurations
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Setup NX Cloud
        uses: nrwl/nx-set-shas@v4

      - name: Build affected or specified sites
        run: |
          SITE=${{ github.event.inputs.site || 'affected' }}
          ENV=${{ github.event.inputs.environment || (github.ref_name == 'main' && 'production' || github.ref_name == 'dev' && 'dev' || 'production') }}
          
          export DOCS_ENV=$ENV
          export NODE_OPTIONS="--max-old-space-size=8192"
          
          if [ "$SITE" = "affected" ]; then
            echo "Building affected sites..."
            nx affected --target=build --parallel=1 --configuration=$ENV
          elif [ "$SITE" = "all" ]; then
            echo "Building all sites..."
            nx run-many --target=build --all --parallel=1 --configuration=$ENV
          else
            echo "Building specific site: $SITE..."
            nx build $SITE --configuration=$ENV
          fi

      - name: Get built projects for artifacts
        id: built-projects
        run: |
          if [ "${{ github.event.inputs.site }}" = "all" ]; then
            projects=$(nx show projects --type=app | tr '\n' ' ')
          elif [ "${{ github.event.inputs.site }}" = "affected" ] || [ -z "${{ github.event.inputs.site }}" ]; then
            projects=$(nx show projects --affected --type=app | tr '\n' ' ')
          else
            projects="${{ github.event.inputs.site }}"
          fi
          echo "projects=$projects" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        if: success()
        run: |
          for project in ${{ steps.built-projects.outputs.projects }}; do
            if [ "$project" = "portal" ]; then
              project_path="portal"
            else
              project_path="standards/${project}"
            fi
            
            if [ -d "${project_path}/build" ]; then
              echo "Uploading artifact for $project..."
              # Create a tar to preserve structure
              tar -czf ${project}-build.tar.gz -C ${project_path} build
            fi
          done

      - name: Upload all build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            *-build.tar.gz
          retention-days: 1

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-nx, test-configurations, test-site-builds]
    if: always()
    
    steps:
      - name: Create summary
        run: |
          echo "## NX Optimized Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Unit Tests, Linting & Type Safety" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test-nx.result }}" == "success" ]; then
            echo "✅ All tests, linting, and type checking passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests, linting, or type checking failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Configuration Tests" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test-configurations.result }}" == "success" ]; then
            echo "✅ Site configurations validated" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Site configuration tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Tests" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test-site-builds.result }}" == "success" ]; then
            echo "✅ Sites built successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Site builds failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Performance Note" >> $GITHUB_STEP_SUMMARY
          echo "This workflow uses NX affected detection to only test/build what changed, significantly reducing CI time." >> $GITHUB_STEP_SUMMARY

      - name: Set job status
        if: |
          needs.test-nx.result != 'success' ||
          needs.test-configurations.result != 'success' ||
          needs.test-site-builds.result != 'success'
        run: exit 1