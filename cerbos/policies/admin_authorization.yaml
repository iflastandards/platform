# Admin Authorization Policy
# This policy defines the complete authorization rules for the IFLA Standards Admin system

apiVersion: api.cerbos.dev/v1
resourcePolicy:
  version: "default"
  resource: "admin"
  
  # Import common attribute schemas
  importDerivedRoles:
    - admin_roles
  
  rules:
    # Superadmin - unrestricted access
    - actions: ["*"]
      effect: EFFECT_ALLOW
      roles:
        - superadmin
      name: "superadmin-all-access"

    # Review Group Management
    - actions:
        - "reviewGroup:create"
        - "reviewGroup:delete"
      effect: EFFECT_ALLOW
      roles:
        - superadmin
      name: "review-group-superadmin-only"

    - actions:
        - "reviewGroup:read"
        - "reviewGroup:list"
      effect: EFFECT_ALLOW
      roles:
        - user
      name: "review-group-read-all"

    - actions:
        - "reviewGroup:update"
        - "reviewGroup:manage"
      effect: EFFECT_ALLOW
      derivedRoles:
        - rg_admin
      condition:
        match:
          expr: request.resource.attr.reviewGroupId in request.principal.attr.reviewGroupAdmin
      name: "review-group-admin-manage"

    # Namespace Management
    - actions:
        - "namespace:create"
        - "namespace:delete"
        - "namespace:update"
      effect: EFFECT_ALLOW
      derivedRoles:
        - rg_admin
      condition:
        match:
          expr: request.resource.attr.reviewGroupId in request.principal.attr.reviewGroupAdmin
      name: "namespace-rg-admin-manage"

    - actions:
        - "namespace:read"
        - "namespace:list"
      effect: EFFECT_ALLOW
      roles:
        - user
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.visibility == "public"
              - expr: request.resource.attr.reviewGroupId in request.principal.attr.reviewGroupAdmin
              - expr: |
                  request.principal.attr.teams.exists(t, 
                    t.reviewGroup == request.resource.attr.reviewGroupId
                  )
      name: "namespace-read-access"

    # Project Management
    - actions:
        - "project:create"
        - "project:delete"
        - "project:update"
        - "project:assignTeam"
        - "project:assignNamespace"
      effect: EFFECT_ALLOW
      derivedRoles:
        - rg_admin
      condition:
        match:
          expr: request.resource.attr.reviewGroupId in request.principal.attr.reviewGroupAdmin
      name: "project-rg-admin-manage"

    - actions:
        - "project:read"
      effect: EFFECT_ALLOW
      roles:
        - user
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.reviewGroupId in request.principal.attr.reviewGroupAdmin
              - expr: |
                  request.principal.attr.teams.exists(t,
                    t.projects.contains(request.resource.attr.projectId)
                  )
      name: "project-read-access"

    # Team Management
    - actions:
        - "team:create"
        - "team:delete"
        - "team:update"
        - "team:addMember"
        - "team:removeMember"
        - "team:updateMemberRole"
      effect: EFFECT_ALLOW
      derivedRoles:
        - rg_admin
      condition:
        match:
          expr: request.resource.attr.reviewGroupId in request.principal.attr.reviewGroupAdmin
      name: "team-rg-admin-manage"

    - actions:
        - "team:read"
        - "team:listMembers"
      effect: EFFECT_ALLOW
      roles:
        - user
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.reviewGroupId in request.principal.attr.reviewGroupAdmin
              - expr: request.resource.attr.teamId in request.principal.attr.teams.map(t, t.teamId)
      name: "team-read-access"

    # Element Set Management
    - actions:
        - "elementSet:create"
        - "elementSet:update"
        - "elementSet:delete"
      effect: EFFECT_ALLOW
      derivedRoles:
        - editor
      condition:
        match:
          expr: |
            request.principal.attr.teams.exists(t,
              t.role == "editor" &&
              t.namespaces.contains(request.resource.attr.namespaceId)
            )
      name: "element-set-editor-manage"

    - actions:
        - "elementSet:read"
      effect: EFFECT_ALLOW
      roles:
        - user
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.visibility == "public"
              - expr: |
                  request.principal.attr.teams.exists(t,
                    t.namespaces.contains(request.resource.attr.namespaceId)
                  )
      name: "element-set-read-access"

    # Value Vocabulary Management
    - actions:
        - "vocabulary:create"
        - "vocabulary:update"
        - "vocabulary:delete"
      effect: EFFECT_ALLOW
      derivedRoles:
        - editor
      condition:
        match:
          expr: |
            request.principal.attr.teams.exists(t,
              t.role == "editor" &&
              t.namespaces.contains(request.resource.attr.namespaceId)
            )
      name: "vocabulary-editor-manage"

    # Translation Management
    - actions:
        - "translation:update"
      effect: EFFECT_ALLOW
      derivedRoles:
        - translator
      condition:
        match:
          expr: |
            request.principal.attr.translations.exists(t,
              t.language == request.resource.attr.language &&
              t.namespaces.contains(request.resource.attr.namespaceId)
            )
      name: "translation-translator-update"

    - actions:
        - "translation:update"
        - "translation:approve"
        - "translation:assignTranslator"
      effect: EFFECT_ALLOW
      derivedRoles:
        - editor
      condition:
        match:
          expr: |
            request.principal.attr.teams.exists(t,
              t.role == "editor" &&
              t.namespaces.contains(request.resource.attr.namespaceId)
            )
      name: "translation-editor-manage"

    # Release Management
    - actions:
        - "release:create"
        - "release:update"
        - "release:publish"
        - "release:delete"
      effect: EFFECT_ALLOW
      derivedRoles:
        - editor
      condition:
        match:
          expr: |
            request.principal.attr.teams.exists(t,
              t.role == "editor" &&
              t.namespaces.contains(request.resource.attr.namespaceId)
            )
      name: "release-editor-manage"

    # Spreadsheet Management
    - actions:
        - "spreadsheet:import"
        - "spreadsheet:export"
        - "spreadsheet:update"
      effect: EFFECT_ALLOW
      derivedRoles:
        - editor
      condition:
        match:
          expr: |
            request.principal.attr.teams.exists(t,
              t.role == "editor" &&
              t.namespaces.contains(request.resource.attr.namespaceId)
            )
      name: "spreadsheet-editor-manage"

    - actions:
        - "spreadsheet:edit"
      effect: EFFECT_ALLOW
      derivedRoles:
        - author
      condition:
        match:
          expr: |
            request.principal.attr.teams.exists(t,
              (t.role == "author" || t.role == "editor") &&
              t.namespaces.contains(request.resource.attr.namespaceId)
            )
      name: "spreadsheet-author-edit"

    # Documentation Management
    - actions:
        - "documentation:create"
        - "documentation:update"
        - "documentation:delete"
      effect: EFFECT_ALLOW
      derivedRoles:
        - author
      condition:
        match:
          expr: |
            request.principal.attr.teams.exists(t,
              (t.role == "author" || t.role == "editor") &&
              t.namespaces.contains(request.resource.attr.namespaceId)
            )
      name: "documentation-author-manage"

    # DCTAP Management
    - actions:
        - "dctap:create"
        - "dctap:update"
        - "dctap:delete"
        - "dctap:export"
      effect: EFFECT_ALLOW
      derivedRoles:
        - editor
      condition:
        match:
          expr: |
            request.principal.attr.teams.exists(t,
              t.role == "editor" &&
              t.namespaces.contains(request.resource.attr.namespaceId)
            )
      name: "dctap-editor-manage"

    # User Management
    - actions:
        - "user:invite"
      effect: EFFECT_ALLOW
      derivedRoles:
        - rg_admin
      condition:
        match:
          expr: request.resource.attr.reviewGroupId in request.principal.attr.reviewGroupAdmin
      name: "user-invite-rg-admin"

    - actions:
        - "user:update"
        - "user:delete"
        - "user:impersonate"
      effect: EFFECT_ALLOW
      roles:
        - superadmin
      name: "user-superadmin-manage"

---
apiVersion: api.cerbos.dev/v1
derivedRoles:
  name: admin_roles
  definitions:
    - name: rg_admin
      parentRoles: ["user"]
      condition:
        match:
          expr: |
            request.principal.attr.reviewGroupAdmin != null &&
            size(request.principal.attr.reviewGroupAdmin) > 0

    - name: editor
      parentRoles: ["user"]
      condition:
        match:
          expr: |
            request.principal.attr.teams.exists(t, t.role == "editor")

    - name: author
      parentRoles: ["user"]
      condition:
        match:
          expr: |
            request.principal.attr.teams.exists(t, 
              t.role == "author" || t.role == "editor"
            )

    - name: translator
      parentRoles: ["user"]
      condition:
        match:
          expr: |
            request.principal.attr.translations != null &&
            size(request.principal.attr.translations) > 0