name: Phase-Based Comprehensive Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Target environment'
        required: false
        default: 'preview'
        type: choice
        options:
          - preview
          - production
          - local
      include_external_services:
        description: 'Test external service integrations'
        required: false
        default: true
        type: boolean

permissions:
  actions: read
  contents: read

concurrency:
  group: "comprehensive-tests-${{ github.ref }}"
  cancel-in-progress: false  # Don't cancel comprehensive tests

env:
  CI: true
  HUSKY: 0
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_DAEMON: true
  NX_PARALLEL: 6
  NODE_OPTIONS: "--max-old-space-size=8192"
  
  # External service configurations
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  AUTH_GITHUB_ID: ${{ secrets.AUTH_GITHUB_ID }}
  AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
  AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
  GOOGLE_SHEETS_API_KEY: ${{ secrets.GOOGLE_SHEETS_API_KEY }}
  GSHEETS_SA_KEY: ${{ secrets.GSHEETS_SA_KEY }}

jobs:
  staging-environment-validation:
    name: Staging Environment & External Services
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        name: Install pnpm

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: |
            .nx/cache
            node_modules/.cache/nx
            !**/.ifla-server-state.json
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4
        id: nx-set-shas

      - name: Test external service connectivity
        if: inputs.include_external_services != false
        run: |
          echo "🌐 Testing external service connectivity with nx affected..."
          
          # Use nx affected for external API testing
          pnpm nx affected -t test --parallel=6
          
      - name: Validate environment configuration
        run: |
          echo "⚙️ Validating environment configuration..."
          
          # Test that all environment variables are properly set
          pnpm test:ci:env
          
      - name: Test base URL and path configurations
        run: |
          echo "🔗 Testing base URL and path configurations with nx affected..."
          
          # Use nx affected for basepath testing
          pnpm nx affected -t test --parallel=4
          
      - name: Test Vercel deployment integrations
        run: |
          echo "▲ Testing Vercel deployment integrations with nx affected..."
          
          # Use nx affected for deployment testing
          pnpm nx affected -t test --parallel=4
          
      - name: Start comprehensive servers
        run: |
          echo "🚀 Starting comprehensive test servers..."
          pnpm test:servers start --test-type integration:all

      - name: Run comprehensive E2E tests
        run: |
          echo "🧪 Running comprehensive E2E tests..."
          
          # Install Playwright browsers
          pnpm exec playwright install --with-deps
          
          # Run comprehensive E2E tests
          ENV="${{ inputs.test_environment || 'preview' }}"
          
          case "$ENV" in
            "preview")
              pnpm exec playwright test --grep "@comprehensive|@staging" --workers=3
              ;;
            "production")
              pnpm exec playwright test --grep "@comprehensive|@production" --workers=2
              ;;
            "local")
              pnpm exec playwright test --grep "@comprehensive" --workers=4
              ;;
          esac

      - name: Test GitHub API integrations
        if: inputs.include_external_services != false
        run: |
          echo "🐙 Testing GitHub API integrations..."
          
          # Test GitHub OAuth, API access, and repository operations
          pnpm test:by-tag --tags @github --parallel 2
          
      - name: Test Supabase integrations
        if: inputs.include_external_services != false
        run: |
          echo "🔐 Testing Supabase integrations..."
          
          # Test database connectivity, auth, and real-time features
          pnpm test:by-tag --tags @supabase --parallel 2
          
      - name: Test Clerk authentication
        if: inputs.include_external_services != false
        run: |
          echo "👤 Testing Clerk authentication integrations..."
          
          # Test authentication flows and user management
          pnpm test:by-tag --tags @clerk --parallel 2

      - name: Validate deployment artifacts
        run: |
          echo "📦 Validating deployment artifacts..."
          
          # Build and validate all sites for the target environment
          ENV="${{ inputs.test_environment || 'preview' }}"
          DOCS_ENV=$ENV pnpm build:all
          
          # Validate build outputs
          node scripts/validate-built-site-links.js --env $ENV
          
      - name: Test production-like scenarios
        if: inputs.test_environment == 'production' || github.ref == 'refs/heads/main'
        run: |
          echo "🏭 Testing production-like scenarios..."
          
          # Run production-specific validations
          pnpm test:by-tag --tags @production --parallel 2
          
          # Validate security headers and policies
          pnpm test:by-tag --tags @security --parallel 2

      - name: Stop servers and cleanup
        if: always()
        run: |
          echo "🛑 Stopping comprehensive test servers..."
          pnpm test:servers stop
          
          # Clean up any test artifacts
          rm -rf test-artifacts/ || true

      - name: Generate comprehensive test summary
        if: always()
        run: |
          echo "## Comprehensive Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** ${{ inputs.test_environment || 'preview' }}" >> $GITHUB_STEP_SUMMARY
          echo "**External Services:** ${{ inputs.include_external_services != false && 'Tested' || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Staging Validations Performed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ External service connectivity (Vercel, Supabase, Clerk, GitHub)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Environment configuration validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Base URL and path configuration testing" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Deployment artifact validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Comprehensive E2E testing" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.test_environment }}" = "production" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "- ✅ Production security validations" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Focus Areas:" >> $GITHUB_STEP_SUMMARY
          echo "- 🌍 External API integrations and authentication" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 URL/path handling across environments" >> $GITHUB_STEP_SUMMARY
          echo "- ▲ Vercel deployment and serverless function testing" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Build artifact and deployment validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Note: This workflow assumes unit and basic integration tests have already passed locally._"

      - name: Upload comprehensive test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-results-${{ github.run_number }}
          path: |
            playwright-report/
            test-results/
            build/
          retention-days: 30

      - name: Upload deployment artifacts for inspection
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts-${{ inputs.test_environment || 'preview' }}-${{ github.run_number }}
          path: |
            _site/
            portal/build/
            standards/*/build/
          retention-days: 7
