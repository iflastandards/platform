name: Test Site Builds

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      site:
        description: 'Site to test (specific site or "all")'
        required: false
        default: 'all'
      environment:
        description: 'Environment to test'
        required: false
        default: 'production'
        type: choice
        options:
          - localhost
          - preview
          - production

jobs:
  test-configurations:
    name: Test Site Configurations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build theme package
        run: pnpm --filter @ifla/theme build

      - name: Test site configurations
        run: |
          SITE=${{ github.event.inputs.site || 'all' }}
          ENV=${{ github.event.inputs.environment || 'production' }}
          node scripts/test-site-builds.js --site $SITE --env $ENV --skip-build

  test-site-builds:
    name: Test Site Builds
    runs-on: ubuntu-latest
    needs: test-configurations
    strategy:
      matrix:
        site: [portal, ISBDM, LRM, FRBR, isbd, muldicat, unimarc]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build theme package
        run: pnpm --filter @ifla/theme build

      - name: Test ${{ matrix.site }} build
        run: |
          ENV=${{ github.event.inputs.environment || 'production' }}
          node scripts/test-site-builds.js --site ${{ matrix.site }} --env $ENV
        env:
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Upload build artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failed-build-${{ matrix.site }}
          path: |
            ${{ matrix.site == 'portal' && 'portal' || format('standards/{0}', matrix.site) }}/build/
            ${{ matrix.site == 'portal' && 'portal' || format('standards/{0}', matrix.site) }}/logs/

  test-url-validation:
    name: Test URL Validation
    runs-on: ubuntu-latest
    needs: test-site-builds
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build theme package
        run: pnpm --filter @ifla/theme build

      - name: Run URL validation tests
        run: |
          SITE=${{ github.event.inputs.site || 'all' }}
          ENV=${{ github.event.inputs.environment || 'production' }}
          # Test sitemap generation
          node scripts/validate-environment-urls.js --site $SITE --env $ENV --type sitemap

      - name: Upload validation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-reports
          path: output/link-validation/

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-configurations, test-site-builds, test-url-validation]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "## Regression Test Summary"
          echo ""
          echo "### Configuration Tests"
          if [ "${{ needs.test-configurations.result }}" == "success" ]; then
            echo "✅ All site configurations passed"
          else
            echo "❌ Site configuration tests failed"
          fi
          echo ""
          echo "### Build Tests"
          if [ "${{ needs.test-site-builds.result }}" == "success" ]; then
            echo "✅ All sites built successfully"
          else
            echo "❌ Some site builds failed"
          fi
          echo ""
          echo "### URL Validation"
          if [ "${{ needs.test-url-validation.result }}" == "success" ]; then
            echo "✅ URL validation passed"
          elif [ "${{ needs.test-url-validation.result }}" == "skipped" ]; then
            echo "⏭️ URL validation skipped"
          else
            echo "❌ URL validation failed"
          fi

      - name: Set job status
        if: |
          needs.test-configurations.result != 'success' ||
          needs.test-site-builds.result != 'success' ||
          (needs.test-url-validation.result != 'success' && needs.test-url-validation.result != 'skipped')
        run: exit 1