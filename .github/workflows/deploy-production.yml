name: Deploy Production (Phase 5 Compliant)
# Phase 5: CI Environment Tests - Deploy to production and validate environment only
# Only runs on PR from preview → main, assumes all testing passed locally

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.vscode/**'
      - '.idea/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read
  pull-requests: write

concurrency:
  group: "production-deploy-${{ github.head_ref || github.ref }}"
  cancel-in-progress: true

env:
  # CI environment
  CI: true
  HUSKY: 0
  
  # Production environment
  DOCS_ENV: production
  NODE_OPTIONS: "--max-old-space-size=8192"
  
  # GitHub API
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Step 1: Validate PR source (Phase 5 - Environment specific)
  validate-pr-source:
    name: Phase 5 - Validate PR Source
    runs-on: ubuntu-latest
    steps:
      - name: Check PR is from preview branch
        run: |
          if [[ "${{ github.head_ref }}" != "preview" ]]; then
            echo "❌ Phase 5: Production deployments must come from preview branch"
            echo "Current branch: ${{ github.head_ref }}"
            exit 1
          fi
          echo "✅ Phase 5: PR is from preview branch"

  # Step 2: Production environment validation ONLY
  validate-production-environment:
    name: Phase 5 - Production Environment Validation
    needs: validate-pr-source
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 1  # Shallow clone for speed
          
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          
      - name: Install dependencies (minimal)
        run: |
          echo "📦 Installing dependencies for environment tests only..."
          pnpm install --frozen-lockfile --ignore-scripts
          
      - name: Phase 5 - Production Environment Variables
        run: |
          echo "🔐 Phase 5: Validating production environment variables..."
          
          required_secrets=(
            "NEXT_PUBLIC_SUPABASE_URL"
            "NEXT_PUBLIC_SUPABASE_ANON_KEY"
            "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY"
            "CLERK_SECRET_KEY"
            "AUTH_GITHUB_ID"
            "AUTH_GITHUB_SECRET"
            "AUTH_SECRET"
            "VERCEL_TOKEN"
            "VERCEL_ORG_ID"
            "VERCEL_PROJECT_ID"
          )
          
          missing=()
          for secret in "${required_secrets[@]}"; do
            if [[ -z "${!secret}" ]]; then
              missing+=("$secret")
            fi
          done
          
          if [ ${#missing[@]} -gt 0 ]; then
            echo "❌ Missing required production secrets:"
            printf '%s\n' "${missing[@]}"
            exit 1
          fi
          
          echo "✅ All production environment variables present"
          
      - name: Phase 5 - Production API Token Validation
        run: |
          echo "🔑 Phase 5: Validating production API tokens..."
          
          # Test Supabase production connection with better error handling
          echo "Testing Supabase endpoint: $NEXT_PUBLIC_SUPABASE_URL/rest/v1/"
          supabase_response=$(curl -s -w "%{http_code}" -o /tmp/supabase_response.txt \
            "$NEXT_PUBLIC_SUPABASE_URL/rest/v1/" \
            -H "apikey: $NEXT_PUBLIC_SUPABASE_ANON_KEY" \
            --max-time 30 || echo "000")
          
          if [ "$supabase_response" = "200" ] || [ "$supabase_response" = "404" ]; then
            echo "✅ Production Supabase API token valid (HTTP $supabase_response)"
          else
            echo "⚠️ Production Supabase API validation inconclusive (HTTP $supabase_response)"
            echo "Response body:"
            cat /tmp/supabase_response.txt || echo "No response body"
            echo "Note: Continuing deployment as this may be a network issue"
          fi
          
          # Test GitHub API access (use repo endpoint which GitHub Actions token can access)
          github_response=$(curl -s -w "%{http_code}" -o /tmp/github_response.txt \
            "https://api.github.com/repos/$GITHUB_REPOSITORY" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --max-time 30 || echo "000")
          
          if [ "$github_response" = "200" ]; then
            echo "✅ GitHub API token valid"
          else
            echo "❌ GitHub API token validation failed (HTTP $github_response)"
            echo "Response body:"
            cat /tmp/github_response.txt || echo "No response body"
            exit 1
          fi
          
          # Test Vercel API access
          if ! curl -s -f "https://api.vercel.com/v2/user" \
            -H "Authorization: Bearer $VERCEL_TOKEN" > /dev/null; then
            echo "❌ Vercel API token validation failed"
            exit 1
          fi
          echo "✅ Vercel API token valid"
          
      - name: Phase 5 - Production Service Connectivity
        run: |
          echo "🌐 Phase 5: Testing production service connectivity..."
          
          production_services=(
            "https://api.github.com"
            "https://api.vercel.com"
            "https://clerk.com"
            "$NEXT_PUBLIC_SUPABASE_URL"
            "https://www.iflastandards.info"
          )
          
          for service in "${production_services[@]}"; do
            if curl -s -f --max-time 10 "$service" > /dev/null; then
              echo "✅ $service reachable"
            else
              echo "❌ $service not reachable from CI"
              exit 1
            fi
          done
          
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      AUTH_GITHUB_ID: ${{ secrets.AUTH_GITHUB_ID }}
      AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
      AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Step 3: Build for production (assumes code quality validated locally)
  build-production:
    name: Build for Production
    needs: validate-production-environment
    runs-on: ubuntu-latest
    environment: Production
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build all sites for production (no testing - assumes local validation)
        run: |
          echo "🏗️ Building all sites for production..."
          echo "Note: Skipping tests - assumes Phases 1-4 passed locally"
          
          # Build theme package
          pnpm nx run @ifla/theme:build
          
          # Build all documentation sites for production
          pnpm nx run-many \
            --target=build \
            --projects=portal,isbdm,lrm,frbr,isbd,muldicat,unimarc \
             --parallel=4
             
       - name: Build admin for production        run: |
          echo "🏗️ Building admin app for production..."
          pnpm nx build admin          
      - name: Create production deployment structure
        run: |
          echo "📦 Creating production deployment structure..."
          
          # Create production build (no /platform subdirectory)
          node scripts/create-unified-build.js --env production --validate
          
          # Production domain CNAME
          echo "www.iflastandards.info" > _site/CNAME
          touch _site/.nojekyll
          
          # Add security headers for production
          cat > _site/_headers << EOF
          /*
            X-Frame-Options: DENY
            X-Content-Type-Options: nosniff
            Referrer-Policy: strict-origin-when-cross-origin
            Permissions-Policy: camera=(), microphone=(), geolocation=()
          EOF
          
      - name: Upload production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            _site/
            apps/admin/.next/
          retention-days: 30

  # Step 4: Deploy to production environments
  deploy-production:
    name: Deploy to Production
    needs: build-production
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://www.iflastandards.info
    steps:
      - name: Download production artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Deploy admin to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/admin
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: '--prod'
          alias-domains: |
            admin.iflastandards.info
        id: vercel-deployment

  # Step 5: Post-deployment environment validation
  production-health-checks:
    name: Phase 5 - Production Health Checks
    needs: deploy-production
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: "Production Site"
            url: "https://www.iflastandards.info"
            expected_status: 200
            
          - service: "ISBDM"
            url: "https://www.iflastandards.info/ISBDM/"
            expected_status: 200
            
          - service: "Admin Portal"
            url: "https://admin.iflastandards.info/admin"
            expected_status: 200
            
          - service: "Admin API Health"
            url: "https://admin.iflastandards.info/admin/api/health"
            expected_status: 200
            
      fail-fast: false
    steps:
      - name: Phase 5 - Production Health Check
        run: |
          echo "🔍 Phase 5: Checking ${{ matrix.service }} in production..."
          
          # Wait for deployment propagation
          sleep 60
          
          # Try up to 5 times for production
          for i in {1..5}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" "${{ matrix.url }}" || echo "000")
            echo "Attempt $i: HTTP status $status"
            
            if [ "$status" -eq "${{ matrix.expected_status }}" ]; then
              echo "✅ ${{ matrix.service }} production deployment healthy"
              exit 0
            fi
            
            [ $i -lt 5 ] && sleep 20
          done
          
          echo "❌ ${{ matrix.service }} production health check failed"
          exit 1

  # Step 6: Production API integration validation
  production-api-validation:
    name: Phase 5 - Production API Validation
    needs: production-health-checks
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          
      - name: Install dependencies (minimal)
        run: pnpm install --frozen-lockfile --ignore-scripts
        
      - name: Phase 5 - Production API Integration Tests
        run: |
          echo "🧪 Phase 5: Running production API integration tests..."
          
          # Test Supabase connection in production
          node -e "
            const { createClient } = require('@supabase/supabase-js');
            const client = createClient(
              process.env.NEXT_PUBLIC_SUPABASE_URL,
              process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
            );
            client.from('test').select('*').limit(1).then(
              ({ error }) => {
                if (error && !error.message.includes('relation')) {
                  console.log('❌ Supabase production connection failed');
                  process.exit(1);
                }
                console.log('✅ Supabase production connection verified');
              }
            );
          "
          
          # Test GitHub API integration
          if curl -s -f "https://api.github.com/repos/${{ github.repository }}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" > /dev/null; then
            echo "✅ GitHub API production integration verified"
          else
            echo "❌ GitHub API production integration failed"
            exit 1
          fi
          
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  # Step 7: Production readiness summary
  production-summary:
    name: Phase 5 - Production Readiness Summary
    needs: [deploy-production, production-health-checks, production-api-validation]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create production summary
        run: |
          cat > production-summary.md << 'EOF'
          # 🚀 Phase 5 - Production Deployment Summary
          
          ## PR Information
          - PR: #${{ github.event.pull_request.number }}
          - Title: ${{ github.event.pull_request.title }}
          - Author: @${{ github.event.pull_request.user.login }}
          
          ## Phase 5 Environment Validation ✅
          - Production environment variables validated
          - Production API tokens verified
          - Production service connectivity confirmed
          - Post-deployment health checks passed
          - Production API integration verified
          
          ## 🌐 Production URLs
          
          ### Documentation Sites
          - Main: https://www.iflastandards.info
          - ISBDM: https://www.iflastandards.info/ISBDM/
          - LRM: https://www.iflastandards.info/LRM/
          - FRBR: https://www.iflastandards.info/FRBR/
          - ISBD: https://www.iflastandards.info/isbd/
          - MulDiCat: https://www.iflastandards.info/muldicat/
          - UNIMARC: https://www.iflastandards.info/unimarc/
          
          ### Admin Portal
          - Admin: https://admin.iflastandards.info
          
          ## Phase 5 Focus
          This deployment workflow focused ONLY on:
          - ✅ Production environment validation
          - ✅ Deployment infrastructure
          - ✅ Post-deployment health checks
          - ✅ Production API integration
          
          Code quality, tests, and builds were validated locally in Phases 1-4.
          
          ## 📋 Ready for Merge
          - [ ] All Phase 5 checks passed
          - [ ] Production health checks verified
          - [ ] API integration tests passed
          - [ ] PR approved by maintainers
          - [ ] Production URLs accessible
          
          ---
          🕐 Ready at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          EOF
          
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('production-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
            
      - name: Add to job summary
        run: |
          cat production-summary.md >> $GITHUB_STEP_SUMMARY